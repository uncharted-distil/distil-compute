// Code generated by protoc-gen-go. DO NOT EDIT.
// source: problem.proto

package pipeline

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProblemPerformanceMetric struct {
	// The evaluation metric. Standard values are required to be supported
	// and are available here:
	// https://metadata.datadrivendiscovery.org/devel/?definitions#definitions.performance_metric
	//
	// In addition, "RANK" metric should be also supported. "RANK" metric
	// can be used for a rank of a solution among all found solutions of
	// a given "SearchSolutions" call. Rank is a non-negative floating-point number.
	// Lower numbers represent better solutions. Each ranked solution should have
	// a different rank (for all solutions of a given "SearchSolutions" call).
	// Only possible with "RANKING" evaluation method.
	//
	// The following additional metrics are defined to allow expressing
	// internal evaluation scores used by TA2 during solution search.
	// If any you are using is missing, feel free to request it to be added.
	// * "LOSS"
	//   Average loss of an unspecified loss function.
	//
	// No standard value will ever start with "_", so if you worry about
	// potential conflicts with future standard values, consider starting
	// your non-standard values with "_'.
	Metric string `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	// Additional params used by some metrics.
	K                    int32    `protobuf:"varint,2,opt,name=k,proto3" json:"k,omitempty"`
	PosLabel             string   `protobuf:"bytes,3,opt,name=pos_label,json=posLabel,proto3" json:"pos_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemPerformanceMetric) Reset()         { *m = ProblemPerformanceMetric{} }
func (m *ProblemPerformanceMetric) String() string { return proto.CompactTextString(m) }
func (*ProblemPerformanceMetric) ProtoMessage()    {}
func (*ProblemPerformanceMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{0}
}

func (m *ProblemPerformanceMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemPerformanceMetric.Unmarshal(m, b)
}
func (m *ProblemPerformanceMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemPerformanceMetric.Marshal(b, m, deterministic)
}
func (m *ProblemPerformanceMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemPerformanceMetric.Merge(m, src)
}
func (m *ProblemPerformanceMetric) XXX_Size() int {
	return xxx_messageInfo_ProblemPerformanceMetric.Size(m)
}
func (m *ProblemPerformanceMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemPerformanceMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemPerformanceMetric proto.InternalMessageInfo

func (m *ProblemPerformanceMetric) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *ProblemPerformanceMetric) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *ProblemPerformanceMetric) GetPosLabel() string {
	if m != nil {
		return m.PosLabel
	}
	return ""
}

type Problem struct {
	// Task keywords of the problem. Standard values are required
	// to be supported and are available here:
	// https://metadata.datadrivendiscovery.org/devel/?definitions#definitions.problem.task_keywords
	//
	// No standard value will ever start with "_", so if you worry about
	// potential conflicts with future standard values, consider starting
	// your non-standard values with "_'.
	TaskKeywords         []string                    `protobuf:"bytes,8,rep,name=task_keywords,json=taskKeywords,proto3" json:"task_keywords,omitempty"`
	PerformanceMetrics   []*ProblemPerformanceMetric `protobuf:"bytes,7,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Problem) Reset()         { *m = Problem{} }
func (m *Problem) String() string { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()    {}
func (*Problem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{1}
}

func (m *Problem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Problem.Unmarshal(m, b)
}
func (m *Problem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Problem.Marshal(b, m, deterministic)
}
func (m *Problem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Problem.Merge(m, src)
}
func (m *Problem) XXX_Size() int {
	return xxx_messageInfo_Problem.Size(m)
}
func (m *Problem) XXX_DiscardUnknown() {
	xxx_messageInfo_Problem.DiscardUnknown(m)
}

var xxx_messageInfo_Problem proto.InternalMessageInfo

func (m *Problem) GetTaskKeywords() []string {
	if m != nil {
		return m.TaskKeywords
	}
	return nil
}

func (m *Problem) GetPerformanceMetrics() []*ProblemPerformanceMetric {
	if m != nil {
		return m.PerformanceMetrics
	}
	return nil
}

type ProblemTarget struct {
	TargetIndex          int32    `protobuf:"varint,1,opt,name=target_index,json=targetIndex,proto3" json:"target_index,omitempty"`
	ResourceId           string   `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ColumnIndex          int32    `protobuf:"varint,3,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	ColumnName           string   `protobuf:"bytes,4,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ClustersNumber       int32    `protobuf:"varint,5,opt,name=clusters_number,json=clustersNumber,proto3" json:"clusters_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemTarget) Reset()         { *m = ProblemTarget{} }
func (m *ProblemTarget) String() string { return proto.CompactTextString(m) }
func (*ProblemTarget) ProtoMessage()    {}
func (*ProblemTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{2}
}

func (m *ProblemTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemTarget.Unmarshal(m, b)
}
func (m *ProblemTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemTarget.Marshal(b, m, deterministic)
}
func (m *ProblemTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemTarget.Merge(m, src)
}
func (m *ProblemTarget) XXX_Size() int {
	return xxx_messageInfo_ProblemTarget.Size(m)
}
func (m *ProblemTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemTarget.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemTarget proto.InternalMessageInfo

func (m *ProblemTarget) GetTargetIndex() int32 {
	if m != nil {
		return m.TargetIndex
	}
	return 0
}

func (m *ProblemTarget) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ProblemTarget) GetColumnIndex() int32 {
	if m != nil {
		return m.ColumnIndex
	}
	return 0
}

func (m *ProblemTarget) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *ProblemTarget) GetClustersNumber() int32 {
	if m != nil {
		return m.ClustersNumber
	}
	return 0
}

type ProblemPrivilegedData struct {
	PrivilegedDataIndex  int32    `protobuf:"varint,1,opt,name=privileged_data_index,json=privilegedDataIndex,proto3" json:"privileged_data_index,omitempty"`
	ResourceId           string   `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ColumnIndex          int32    `protobuf:"varint,3,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	ColumnName           string   `protobuf:"bytes,4,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemPrivilegedData) Reset()         { *m = ProblemPrivilegedData{} }
func (m *ProblemPrivilegedData) String() string { return proto.CompactTextString(m) }
func (*ProblemPrivilegedData) ProtoMessage()    {}
func (*ProblemPrivilegedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{3}
}

func (m *ProblemPrivilegedData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemPrivilegedData.Unmarshal(m, b)
}
func (m *ProblemPrivilegedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemPrivilegedData.Marshal(b, m, deterministic)
}
func (m *ProblemPrivilegedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemPrivilegedData.Merge(m, src)
}
func (m *ProblemPrivilegedData) XXX_Size() int {
	return xxx_messageInfo_ProblemPrivilegedData.Size(m)
}
func (m *ProblemPrivilegedData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemPrivilegedData.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemPrivilegedData proto.InternalMessageInfo

func (m *ProblemPrivilegedData) GetPrivilegedDataIndex() int32 {
	if m != nil {
		return m.PrivilegedDataIndex
	}
	return 0
}

func (m *ProblemPrivilegedData) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ProblemPrivilegedData) GetColumnIndex() int32 {
	if m != nil {
		return m.ColumnIndex
	}
	return 0
}

func (m *ProblemPrivilegedData) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

type ForecastingHorizon struct {
	ResourceId           string   `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ColumnIndex          int32    `protobuf:"varint,2,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	ColumnName           string   `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	HorizonValue         float64  `protobuf:"fixed64,4,opt,name=horizon_value,json=horizonValue,proto3" json:"horizon_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForecastingHorizon) Reset()         { *m = ForecastingHorizon{} }
func (m *ForecastingHorizon) String() string { return proto.CompactTextString(m) }
func (*ForecastingHorizon) ProtoMessage()    {}
func (*ForecastingHorizon) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{4}
}

func (m *ForecastingHorizon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForecastingHorizon.Unmarshal(m, b)
}
func (m *ForecastingHorizon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForecastingHorizon.Marshal(b, m, deterministic)
}
func (m *ForecastingHorizon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForecastingHorizon.Merge(m, src)
}
func (m *ForecastingHorizon) XXX_Size() int {
	return xxx_messageInfo_ForecastingHorizon.Size(m)
}
func (m *ForecastingHorizon) XXX_DiscardUnknown() {
	xxx_messageInfo_ForecastingHorizon.DiscardUnknown(m)
}

var xxx_messageInfo_ForecastingHorizon proto.InternalMessageInfo

func (m *ForecastingHorizon) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ForecastingHorizon) GetColumnIndex() int32 {
	if m != nil {
		return m.ColumnIndex
	}
	return 0
}

func (m *ForecastingHorizon) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *ForecastingHorizon) GetHorizonValue() float64 {
	if m != nil {
		return m.HorizonValue
	}
	return 0
}

type ProblemInput struct {
	// Should match one of input datasets given to the pipeline search.
	// Every "Dataset" object has an "id" associated with it and is available
	// in its metadata. That ID is then used here to reference those inputs.
	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Targets should resolve to columns in a given dataset.
	Targets []*ProblemTarget `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	// A list of privileged data columns related to unavailable attributes during testing.
	// These columns do not have data available in the test split of a dataset.
	PrivilegedData       []*ProblemPrivilegedData `protobuf:"bytes,3,rep,name=privileged_data,json=privilegedData,proto3" json:"privileged_data,omitempty"`
	ForecastingHorizon   *ForecastingHorizon      `protobuf:"bytes,4,opt,name=forecasting_horizon,json=forecastingHorizon,proto3" json:"forecasting_horizon,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ProblemInput) Reset()         { *m = ProblemInput{} }
func (m *ProblemInput) String() string { return proto.CompactTextString(m) }
func (*ProblemInput) ProtoMessage()    {}
func (*ProblemInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{5}
}

func (m *ProblemInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemInput.Unmarshal(m, b)
}
func (m *ProblemInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemInput.Marshal(b, m, deterministic)
}
func (m *ProblemInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemInput.Merge(m, src)
}
func (m *ProblemInput) XXX_Size() int {
	return xxx_messageInfo_ProblemInput.Size(m)
}
func (m *ProblemInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemInput.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemInput proto.InternalMessageInfo

func (m *ProblemInput) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *ProblemInput) GetTargets() []*ProblemTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *ProblemInput) GetPrivilegedData() []*ProblemPrivilegedData {
	if m != nil {
		return m.PrivilegedData
	}
	return nil
}

func (m *ProblemInput) GetForecastingHorizon() *ForecastingHorizon {
	if m != nil {
		return m.ForecastingHorizon
	}
	return nil
}

type DataAugmentation struct {
	Domain               []string `protobuf:"bytes,1,rep,name=domain,proto3" json:"domain,omitempty"`
	Keywords             []string `protobuf:"bytes,2,rep,name=keywords,proto3" json:"keywords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataAugmentation) Reset()         { *m = DataAugmentation{} }
func (m *DataAugmentation) String() string { return proto.CompactTextString(m) }
func (*DataAugmentation) ProtoMessage()    {}
func (*DataAugmentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{6}
}

func (m *DataAugmentation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataAugmentation.Unmarshal(m, b)
}
func (m *DataAugmentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataAugmentation.Marshal(b, m, deterministic)
}
func (m *DataAugmentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataAugmentation.Merge(m, src)
}
func (m *DataAugmentation) XXX_Size() int {
	return xxx_messageInfo_DataAugmentation.Size(m)
}
func (m *DataAugmentation) XXX_DiscardUnknown() {
	xxx_messageInfo_DataAugmentation.DiscardUnknown(m)
}

var xxx_messageInfo_DataAugmentation proto.InternalMessageInfo

func (m *DataAugmentation) GetDomain() []string {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *DataAugmentation) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

// Problem description matches the parsed problem description by
// the d3m_metadata.problem.parse_problem_description Python method.
// Problem outputs are not necessary for the purpose of this API
// and are needed only when executing an exported pipeline, but then
// TA2 gets full problem description anyway directly.
type ProblemDescription struct {
	Problem *Problem        `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
	Inputs  []*ProblemInput `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// ID of this problem. Required.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Version of this problem.
	Version              string              `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Name                 string              `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description          string              `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Digest               string              `protobuf:"bytes,7,opt,name=digest,proto3" json:"digest,omitempty"`
	DataAugmentation     []*DataAugmentation `protobuf:"bytes,8,rep,name=data_augmentation,json=dataAugmentation,proto3" json:"data_augmentation,omitempty"`
	OtherNames           []string            `protobuf:"bytes,9,rep,name=other_names,json=otherNames,proto3" json:"other_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProblemDescription) Reset()         { *m = ProblemDescription{} }
func (m *ProblemDescription) String() string { return proto.CompactTextString(m) }
func (*ProblemDescription) ProtoMessage()    {}
func (*ProblemDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{7}
}

func (m *ProblemDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemDescription.Unmarshal(m, b)
}
func (m *ProblemDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemDescription.Marshal(b, m, deterministic)
}
func (m *ProblemDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemDescription.Merge(m, src)
}
func (m *ProblemDescription) XXX_Size() int {
	return xxx_messageInfo_ProblemDescription.Size(m)
}
func (m *ProblemDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemDescription.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemDescription proto.InternalMessageInfo

func (m *ProblemDescription) GetProblem() *Problem {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *ProblemDescription) GetInputs() []*ProblemInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ProblemDescription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProblemDescription) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ProblemDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProblemDescription) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProblemDescription) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *ProblemDescription) GetDataAugmentation() []*DataAugmentation {
	if m != nil {
		return m.DataAugmentation
	}
	return nil
}

func (m *ProblemDescription) GetOtherNames() []string {
	if m != nil {
		return m.OtherNames
	}
	return nil
}

func init() {
	proto.RegisterType((*ProblemPerformanceMetric)(nil), "ProblemPerformanceMetric")
	proto.RegisterType((*Problem)(nil), "Problem")
	proto.RegisterType((*ProblemTarget)(nil), "ProblemTarget")
	proto.RegisterType((*ProblemPrivilegedData)(nil), "ProblemPrivilegedData")
	proto.RegisterType((*ForecastingHorizon)(nil), "ForecastingHorizon")
	proto.RegisterType((*ProblemInput)(nil), "ProblemInput")
	proto.RegisterType((*DataAugmentation)(nil), "DataAugmentation")
	proto.RegisterType((*ProblemDescription)(nil), "ProblemDescription")
}

func init() { proto.RegisterFile("problem.proto", fileDescriptor_b319862c9661813c) }

var fileDescriptor_b319862c9661813c = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0xc7, 0x95, 0x74, 0x6d, 0x9a, 0x93, 0xb6, 0xdb, 0x5c, 0x6d, 0xf2, 0xef, 0x87, 0xd0, 0x4a,
	0x26, 0x44, 0xaf, 0x72, 0x51, 0xee, 0x41, 0xa0, 0x69, 0xa2, 0xfc, 0x99, 0x26, 0x0b, 0x71, 0x81,
	0x84, 0x22, 0x37, 0xf1, 0x3a, 0xab, 0x49, 0x1c, 0xd9, 0xce, 0x80, 0x3d, 0x0c, 0xcf, 0xc0, 0x25,
	0x97, 0x3c, 0x09, 0xcf, 0x82, 0xe2, 0x38, 0xdd, 0xda, 0x81, 0x76, 0xc7, 0x5d, 0xce, 0xe7, 0x38,
	0xe7, 0xcf, 0xf7, 0x1c, 0x1b, 0x86, 0xa5, 0x14, 0x8b, 0x8c, 0xe5, 0x51, 0x29, 0x85, 0x16, 0xe1,
	0x27, 0xc0, 0xe7, 0x0d, 0x38, 0x67, 0xf2, 0x42, 0xc8, 0x9c, 0x16, 0x09, 0x7b, 0xc7, 0xb4, 0xe4,
	0x09, 0x3a, 0x84, 0x5e, 0x6e, 0xbe, 0xb0, 0x33, 0x71, 0xa6, 0x3e, 0xb1, 0x16, 0x1a, 0x80, 0xb3,
	0xc2, 0xee, 0xc4, 0x99, 0x76, 0x89, 0xb3, 0x42, 0x0f, 0xc0, 0x2f, 0x85, 0x8a, 0x33, 0xba, 0x60,
	0x19, 0xee, 0x98, 0x83, 0xfd, 0x52, 0xa8, 0xb7, 0xb5, 0x1d, 0x5e, 0x83, 0x67, 0xc3, 0xa3, 0x63,
	0x18, 0x6a, 0xaa, 0x56, 0xf1, 0x8a, 0x7d, 0xfd, 0x2c, 0x64, 0xaa, 0x70, 0x7f, 0xd2, 0x99, 0xfa,
	0x64, 0x50, 0xc3, 0x37, 0x96, 0xa1, 0xd7, 0x30, 0x2e, 0x6f, 0xea, 0x88, 0x9b, 0x84, 0x0a, 0x7b,
	0x93, 0xce, 0x34, 0x98, 0xfd, 0x17, 0xfd, 0xad, 0x54, 0x82, 0xca, 0x6d, 0xa4, 0xc2, 0x9f, 0x0e,
	0x0c, 0xed, 0x0f, 0xef, 0xa9, 0x5c, 0x32, 0x8d, 0x1e, 0xc1, 0x40, 0x9b, 0xaf, 0x98, 0x17, 0x29,
	0xfb, 0x62, 0xda, 0xea, 0x92, 0xa0, 0x61, 0xf3, 0x1a, 0xa1, 0x23, 0x08, 0x24, 0x53, 0xa2, 0x92,
	0x09, 0x8b, 0x79, 0x6a, 0xba, 0xf4, 0x09, 0xb4, 0x68, 0x9e, 0xd6, 0x31, 0x12, 0x91, 0x55, 0x79,
	0x61, 0x63, 0x74, 0x9a, 0x18, 0x0d, 0x5b, 0xc7, 0xb0, 0x47, 0x0a, 0x9a, 0x33, 0xbc, 0xd3, 0xc4,
	0x68, 0xd0, 0x19, 0xcd, 0x19, 0x7a, 0x02, 0xbb, 0x49, 0x56, 0x29, 0xcd, 0xa4, 0x8a, 0x8b, 0x2a,
	0x5f, 0x30, 0x89, 0xbb, 0x26, 0xcc, 0xa8, 0xc5, 0x67, 0x86, 0x86, 0xdf, 0x1d, 0x38, 0x68, 0x7b,
	0x96, 0xfc, 0x8a, 0x67, 0x6c, 0xc9, 0xd2, 0x13, 0xaa, 0x29, 0x9a, 0xc1, 0x41, 0xb9, 0x26, 0x71,
	0x4a, 0x35, 0xdd, 0xe8, 0x69, 0x5c, 0x6e, 0x1c, 0xff, 0x77, 0xbd, 0x85, 0xdf, 0x1c, 0x40, 0xa7,
	0x42, 0xb2, 0x84, 0x2a, 0xcd, 0x8b, 0xe5, 0x2b, 0x21, 0xf9, 0xb5, 0x28, 0xb6, 0x73, 0x3b, 0xf7,
	0xe6, 0x76, 0xef, 0xcd, 0xdd, 0xb9, 0xa3, 0xeb, 0x31, 0x0c, 0x2f, 0x9b, 0x7c, 0xf1, 0x15, 0xcd,
	0xaa, 0xa6, 0x3c, 0x87, 0x0c, 0x2c, 0xfc, 0x50, 0xb3, 0xf0, 0x97, 0x03, 0x03, 0xab, 0xe9, 0xbc,
	0x28, 0x2b, 0x8d, 0x1e, 0x02, 0xd4, 0xfa, 0xa9, 0x7a, 0x2d, 0xda, 0xca, 0x7c, 0x4b, 0xe6, 0x29,
	0x9a, 0x82, 0xd7, 0x2c, 0x88, 0xc2, 0xae, 0x59, 0xc3, 0x51, 0xb4, 0xb1, 0x55, 0xa4, 0x75, 0xa3,
	0xe7, 0xb0, 0xbb, 0x35, 0x13, 0xdc, 0x31, 0x7f, 0x1c, 0x46, 0x7f, 0x1c, 0x22, 0x19, 0x6d, 0x4e,
	0x09, 0x9d, 0xc0, 0xf8, 0xe2, 0x46, 0xba, 0xd8, 0x96, 0x6d, 0xba, 0x08, 0x66, 0xe3, 0xe8, 0xae,
	0xac, 0x04, 0x5d, 0xdc, 0x61, 0xe1, 0x29, 0xec, 0xd5, 0xd1, 0x5e, 0x54, 0xcb, 0x9c, 0x15, 0x9a,
	0x6a, 0x2e, 0x8a, 0xfa, 0x2a, 0xa7, 0x22, 0xa7, 0xbc, 0xc0, 0x8e, 0xb9, 0x75, 0xd6, 0x42, 0xff,
	0x43, 0x7f, 0x7d, 0x1f, 0x5d, 0xe3, 0x59, 0xdb, 0xe1, 0x0f, 0x17, 0x90, 0xad, 0xfb, 0x84, 0xa9,
	0x44, 0xf2, 0xd2, 0x84, 0x0a, 0xc1, 0xb3, 0x4f, 0x88, 0xd1, 0x2a, 0x98, 0xf5, 0xdb, 0xee, 0x48,
	0xeb, 0x40, 0x8f, 0xa1, 0xc7, 0x6b, 0x6d, 0x5b, 0xc9, 0x86, 0xd1, 0x6d, 0xc5, 0x89, 0x75, 0xa2,
	0x11, 0xb8, 0x3c, 0xb5, 0x73, 0x74, 0x79, 0x8a, 0x30, 0x78, 0x57, 0x4c, 0x2a, 0x6e, 0x7b, 0xf6,
	0x49, 0x6b, 0x22, 0x04, 0x3b, 0x66, 0xe6, 0x5d, 0x83, 0xcd, 0x37, 0x9a, 0x40, 0x90, 0xde, 0xd4,
	0x85, 0x7b, 0xc6, 0x75, 0x1b, 0x99, 0xae, 0xf9, 0x92, 0x29, 0x8d, 0xbd, 0xe6, 0x01, 0x6b, 0x2c,
	0xf4, 0x0c, 0xf6, 0xcd, 0x8d, 0xa1, 0xb7, 0x24, 0x32, 0xcf, 0x51, 0x30, 0xdb, 0x8f, 0xb6, 0xb5,
	0x23, 0x7b, 0xe9, 0xb6, 0x9a, 0x47, 0x10, 0x08, 0x7d, 0xc9, 0xa4, 0xd9, 0x43, 0x85, 0x7d, 0x23,
	0x1c, 0x18, 0x54, 0xef, 0xa1, 0x7a, 0x09, 0x1f, 0xfb, 0x25, 0x2f, 0x59, 0xc6, 0x0b, 0xb6, 0xe8,
	0x99, 0x87, 0xf6, 0xe9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x40, 0xa9, 0x31, 0x79, 0x05,
	0x00, 0x00,
}
