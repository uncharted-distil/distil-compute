// Code generated by protoc-gen-go. DO NOT EDIT.
// source: problem.proto

package pipeline

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Task keyword of the problem.
type TaskKeyword int32

const (
	// Default value. Not to be used.
	TaskKeyword_TASK_KEYWORD_UNDEFINED  TaskKeyword = 0
	TaskKeyword_CLASSIFICATION          TaskKeyword = 1
	TaskKeyword_REGRESSION              TaskKeyword = 2
	TaskKeyword_CLUSTERING              TaskKeyword = 3
	TaskKeyword_LINK_PREDICTION         TaskKeyword = 4
	TaskKeyword_VERTEX_NOMINATION       TaskKeyword = 5
	TaskKeyword_VERTEX_CLASSIFICATION   TaskKeyword = 6
	TaskKeyword_COMMUNITY_DETECTION     TaskKeyword = 7
	TaskKeyword_GRAPH_MATCHING          TaskKeyword = 8
	TaskKeyword_FORECASTING             TaskKeyword = 9
	TaskKeyword_COLLABORATIVE_FILTERING TaskKeyword = 10
	TaskKeyword_OBJECT_DETECTION        TaskKeyword = 11
	TaskKeyword_SEMISUPERVISED          TaskKeyword = 12
	TaskKeyword_BINARY                  TaskKeyword = 13
	TaskKeyword_MULTICLASS              TaskKeyword = 14
	TaskKeyword_MULTILABEL              TaskKeyword = 15
	TaskKeyword_UNIVARIATE              TaskKeyword = 16
	TaskKeyword_MULTIVARIATE            TaskKeyword = 17
	TaskKeyword_OVERLAPPING             TaskKeyword = 18
	TaskKeyword_NONOVERLAPPING          TaskKeyword = 19
	TaskKeyword_TABULAR                 TaskKeyword = 20
	TaskKeyword_RELATIONAL              TaskKeyword = 21
	TaskKeyword_IMAGE                   TaskKeyword = 22
	TaskKeyword_AUDIO                   TaskKeyword = 23
	TaskKeyword_VIDEO                   TaskKeyword = 24
	TaskKeyword_SPEECH                  TaskKeyword = 25
	TaskKeyword_TEXT                    TaskKeyword = 26
	TaskKeyword_GRAPH                   TaskKeyword = 27
	TaskKeyword_MULTIGRAPH              TaskKeyword = 28
	TaskKeyword_TIME_SERIES             TaskKeyword = 29
	TaskKeyword_GROUPED                 TaskKeyword = 30
	TaskKeyword_GEOSPATIAL              TaskKeyword = 31
	TaskKeyword_REMOTE_SENSING          TaskKeyword = 32
	TaskKeyword_LUPI                    TaskKeyword = 33
	TaskKeyword_MISSING_METADATA        TaskKeyword = 34
)

var TaskKeyword_name = map[int32]string{
	0:  "TASK_KEYWORD_UNDEFINED",
	1:  "CLASSIFICATION",
	2:  "REGRESSION",
	3:  "CLUSTERING",
	4:  "LINK_PREDICTION",
	5:  "VERTEX_NOMINATION",
	6:  "VERTEX_CLASSIFICATION",
	7:  "COMMUNITY_DETECTION",
	8:  "GRAPH_MATCHING",
	9:  "FORECASTING",
	10: "COLLABORATIVE_FILTERING",
	11: "OBJECT_DETECTION",
	12: "SEMISUPERVISED",
	13: "BINARY",
	14: "MULTICLASS",
	15: "MULTILABEL",
	16: "UNIVARIATE",
	17: "MULTIVARIATE",
	18: "OVERLAPPING",
	19: "NONOVERLAPPING",
	20: "TABULAR",
	21: "RELATIONAL",
	22: "IMAGE",
	23: "AUDIO",
	24: "VIDEO",
	25: "SPEECH",
	26: "TEXT",
	27: "GRAPH",
	28: "MULTIGRAPH",
	29: "TIME_SERIES",
	30: "GROUPED",
	31: "GEOSPATIAL",
	32: "REMOTE_SENSING",
	33: "LUPI",
	34: "MISSING_METADATA",
}

var TaskKeyword_value = map[string]int32{
	"TASK_KEYWORD_UNDEFINED":  0,
	"CLASSIFICATION":          1,
	"REGRESSION":              2,
	"CLUSTERING":              3,
	"LINK_PREDICTION":         4,
	"VERTEX_NOMINATION":       5,
	"VERTEX_CLASSIFICATION":   6,
	"COMMUNITY_DETECTION":     7,
	"GRAPH_MATCHING":          8,
	"FORECASTING":             9,
	"COLLABORATIVE_FILTERING": 10,
	"OBJECT_DETECTION":        11,
	"SEMISUPERVISED":          12,
	"BINARY":                  13,
	"MULTICLASS":              14,
	"MULTILABEL":              15,
	"UNIVARIATE":              16,
	"MULTIVARIATE":            17,
	"OVERLAPPING":             18,
	"NONOVERLAPPING":          19,
	"TABULAR":                 20,
	"RELATIONAL":              21,
	"IMAGE":                   22,
	"AUDIO":                   23,
	"VIDEO":                   24,
	"SPEECH":                  25,
	"TEXT":                    26,
	"GRAPH":                   27,
	"MULTIGRAPH":              28,
	"TIME_SERIES":             29,
	"GROUPED":                 30,
	"GEOSPATIAL":              31,
	"REMOTE_SENSING":          32,
	"LUPI":                    33,
	"MISSING_METADATA":        34,
}

func (x TaskKeyword) String() string {
	return proto.EnumName(TaskKeyword_name, int32(x))
}

func (TaskKeyword) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{0}
}

// The evaluation metric for any potential solution.
type PerformanceMetric int32

const (
	// Default value. Not to be used.
	PerformanceMetric_METRIC_UNDEFINED PerformanceMetric = 0
	// The following are the only evaluation methods required
	// to be supported for the ScoreSolution call.
	PerformanceMetric_ACCURACY                           PerformanceMetric = 1
	PerformanceMetric_PRECISION                          PerformanceMetric = 2
	PerformanceMetric_RECALL                             PerformanceMetric = 3
	PerformanceMetric_F1                                 PerformanceMetric = 4
	PerformanceMetric_F1_MICRO                           PerformanceMetric = 5
	PerformanceMetric_F1_MACRO                           PerformanceMetric = 6
	PerformanceMetric_ROC_AUC                            PerformanceMetric = 7
	PerformanceMetric_ROC_AUC_MICRO                      PerformanceMetric = 8
	PerformanceMetric_ROC_AUC_MACRO                      PerformanceMetric = 9
	PerformanceMetric_MEAN_SQUARED_ERROR                 PerformanceMetric = 10
	PerformanceMetric_ROOT_MEAN_SQUARED_ERROR            PerformanceMetric = 11
	PerformanceMetric_MEAN_ABSOLUTE_ERROR                PerformanceMetric = 12
	PerformanceMetric_R_SQUARED                          PerformanceMetric = 13
	PerformanceMetric_NORMALIZED_MUTUAL_INFORMATION      PerformanceMetric = 14
	PerformanceMetric_JACCARD_SIMILARITY_SCORE           PerformanceMetric = 15
	PerformanceMetric_PRECISION_AT_TOP_K                 PerformanceMetric = 16
	PerformanceMetric_OBJECT_DETECTION_AVERAGE_PRECISION PerformanceMetric = 17
	PerformanceMetric_HAMMING_LOSS                       PerformanceMetric = 18
	// This metric can be used to ask TA2 to rank a solution as part of
	// all found solutions of a given "SearchSolutions" call. Rank is a
	// floating-point number. Lower numbers represent better solutions.
	// Presently evaluation requirements are that ranks should be non-negative
	// and that each ranked pipeline have a different rank (for all
	// solutions of a given SearchSolutions call). Only possible with
	// "RANKING" evaluation method.
	PerformanceMetric_RANK PerformanceMetric = 99
	// The rest are defined to allow expressing internal evaluation
	// scores used by TA2 during pipeline search. If any you are using
	// is missing, feel free to request it to be added.
	// Average loss of an unspecified loss function.
	PerformanceMetric_LOSS PerformanceMetric = 100
)

var PerformanceMetric_name = map[int32]string{
	0:   "METRIC_UNDEFINED",
	1:   "ACCURACY",
	2:   "PRECISION",
	3:   "RECALL",
	4:   "F1",
	5:   "F1_MICRO",
	6:   "F1_MACRO",
	7:   "ROC_AUC",
	8:   "ROC_AUC_MICRO",
	9:   "ROC_AUC_MACRO",
	10:  "MEAN_SQUARED_ERROR",
	11:  "ROOT_MEAN_SQUARED_ERROR",
	12:  "MEAN_ABSOLUTE_ERROR",
	13:  "R_SQUARED",
	14:  "NORMALIZED_MUTUAL_INFORMATION",
	15:  "JACCARD_SIMILARITY_SCORE",
	16:  "PRECISION_AT_TOP_K",
	17:  "OBJECT_DETECTION_AVERAGE_PRECISION",
	18:  "HAMMING_LOSS",
	99:  "RANK",
	100: "LOSS",
}

var PerformanceMetric_value = map[string]int32{
	"METRIC_UNDEFINED":                   0,
	"ACCURACY":                           1,
	"PRECISION":                          2,
	"RECALL":                             3,
	"F1":                                 4,
	"F1_MICRO":                           5,
	"F1_MACRO":                           6,
	"ROC_AUC":                            7,
	"ROC_AUC_MICRO":                      8,
	"ROC_AUC_MACRO":                      9,
	"MEAN_SQUARED_ERROR":                 10,
	"ROOT_MEAN_SQUARED_ERROR":            11,
	"MEAN_ABSOLUTE_ERROR":                12,
	"R_SQUARED":                          13,
	"NORMALIZED_MUTUAL_INFORMATION":      14,
	"JACCARD_SIMILARITY_SCORE":           15,
	"PRECISION_AT_TOP_K":                 16,
	"OBJECT_DETECTION_AVERAGE_PRECISION": 17,
	"HAMMING_LOSS":                       18,
	"RANK":                               99,
	"LOSS":                               100,
}

func (x PerformanceMetric) String() string {
	return proto.EnumName(PerformanceMetric_name, int32(x))
}

func (PerformanceMetric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{1}
}

type ProblemPerformanceMetric struct {
	Metric PerformanceMetric `protobuf:"varint,1,opt,name=metric,proto3,enum=PerformanceMetric" json:"metric,omitempty"`
	// Additional params used by some metrics.
	K                    int32    `protobuf:"varint,2,opt,name=k,proto3" json:"k,omitempty"`
	PosLabel             string   `protobuf:"bytes,3,opt,name=pos_label,json=posLabel,proto3" json:"pos_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemPerformanceMetric) Reset()         { *m = ProblemPerformanceMetric{} }
func (m *ProblemPerformanceMetric) String() string { return proto.CompactTextString(m) }
func (*ProblemPerformanceMetric) ProtoMessage()    {}
func (*ProblemPerformanceMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{0}
}

func (m *ProblemPerformanceMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemPerformanceMetric.Unmarshal(m, b)
}
func (m *ProblemPerformanceMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemPerformanceMetric.Marshal(b, m, deterministic)
}
func (m *ProblemPerformanceMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemPerformanceMetric.Merge(m, src)
}
func (m *ProblemPerformanceMetric) XXX_Size() int {
	return xxx_messageInfo_ProblemPerformanceMetric.Size(m)
}
func (m *ProblemPerformanceMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemPerformanceMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemPerformanceMetric proto.InternalMessageInfo

func (m *ProblemPerformanceMetric) GetMetric() PerformanceMetric {
	if m != nil {
		return m.Metric
	}
	return PerformanceMetric_METRIC_UNDEFINED
}

func (m *ProblemPerformanceMetric) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *ProblemPerformanceMetric) GetPosLabel() string {
	if m != nil {
		return m.PosLabel
	}
	return ""
}

type Problem struct {
	TaskKeywords         []TaskKeyword               `protobuf:"varint,8,rep,packed,name=task_keywords,json=taskKeywords,proto3,enum=TaskKeyword" json:"task_keywords,omitempty"`
	PerformanceMetrics   []*ProblemPerformanceMetric `protobuf:"bytes,7,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Problem) Reset()         { *m = Problem{} }
func (m *Problem) String() string { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()    {}
func (*Problem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{1}
}

func (m *Problem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Problem.Unmarshal(m, b)
}
func (m *Problem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Problem.Marshal(b, m, deterministic)
}
func (m *Problem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Problem.Merge(m, src)
}
func (m *Problem) XXX_Size() int {
	return xxx_messageInfo_Problem.Size(m)
}
func (m *Problem) XXX_DiscardUnknown() {
	xxx_messageInfo_Problem.DiscardUnknown(m)
}

var xxx_messageInfo_Problem proto.InternalMessageInfo

func (m *Problem) GetTaskKeywords() []TaskKeyword {
	if m != nil {
		return m.TaskKeywords
	}
	return nil
}

func (m *Problem) GetPerformanceMetrics() []*ProblemPerformanceMetric {
	if m != nil {
		return m.PerformanceMetrics
	}
	return nil
}

type ProblemTarget struct {
	TargetIndex          int32    `protobuf:"varint,1,opt,name=target_index,json=targetIndex,proto3" json:"target_index,omitempty"`
	ResourceId           string   `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ColumnIndex          int32    `protobuf:"varint,3,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	ColumnName           string   `protobuf:"bytes,4,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ClustersNumber       int32    `protobuf:"varint,5,opt,name=clusters_number,json=clustersNumber,proto3" json:"clusters_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemTarget) Reset()         { *m = ProblemTarget{} }
func (m *ProblemTarget) String() string { return proto.CompactTextString(m) }
func (*ProblemTarget) ProtoMessage()    {}
func (*ProblemTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{2}
}

func (m *ProblemTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemTarget.Unmarshal(m, b)
}
func (m *ProblemTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemTarget.Marshal(b, m, deterministic)
}
func (m *ProblemTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemTarget.Merge(m, src)
}
func (m *ProblemTarget) XXX_Size() int {
	return xxx_messageInfo_ProblemTarget.Size(m)
}
func (m *ProblemTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemTarget.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemTarget proto.InternalMessageInfo

func (m *ProblemTarget) GetTargetIndex() int32 {
	if m != nil {
		return m.TargetIndex
	}
	return 0
}

func (m *ProblemTarget) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ProblemTarget) GetColumnIndex() int32 {
	if m != nil {
		return m.ColumnIndex
	}
	return 0
}

func (m *ProblemTarget) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *ProblemTarget) GetClustersNumber() int32 {
	if m != nil {
		return m.ClustersNumber
	}
	return 0
}

type ProblemPrivilegedData struct {
	PrivilegedDataIndex  int32    `protobuf:"varint,1,opt,name=privileged_data_index,json=privilegedDataIndex,proto3" json:"privileged_data_index,omitempty"`
	ResourceId           string   `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ColumnIndex          int32    `protobuf:"varint,3,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	ColumnName           string   `protobuf:"bytes,4,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProblemPrivilegedData) Reset()         { *m = ProblemPrivilegedData{} }
func (m *ProblemPrivilegedData) String() string { return proto.CompactTextString(m) }
func (*ProblemPrivilegedData) ProtoMessage()    {}
func (*ProblemPrivilegedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{3}
}

func (m *ProblemPrivilegedData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemPrivilegedData.Unmarshal(m, b)
}
func (m *ProblemPrivilegedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemPrivilegedData.Marshal(b, m, deterministic)
}
func (m *ProblemPrivilegedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemPrivilegedData.Merge(m, src)
}
func (m *ProblemPrivilegedData) XXX_Size() int {
	return xxx_messageInfo_ProblemPrivilegedData.Size(m)
}
func (m *ProblemPrivilegedData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemPrivilegedData.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemPrivilegedData proto.InternalMessageInfo

func (m *ProblemPrivilegedData) GetPrivilegedDataIndex() int32 {
	if m != nil {
		return m.PrivilegedDataIndex
	}
	return 0
}

func (m *ProblemPrivilegedData) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ProblemPrivilegedData) GetColumnIndex() int32 {
	if m != nil {
		return m.ColumnIndex
	}
	return 0
}

func (m *ProblemPrivilegedData) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

type ForecastingHorizon struct {
	ResourceId           string   `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ColumnIndex          int32    `protobuf:"varint,2,opt,name=column_index,json=columnIndex,proto3" json:"column_index,omitempty"`
	ColumnName           string   `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	HorizonValue         float64  `protobuf:"fixed64,4,opt,name=horizon_value,json=horizonValue,proto3" json:"horizon_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForecastingHorizon) Reset()         { *m = ForecastingHorizon{} }
func (m *ForecastingHorizon) String() string { return proto.CompactTextString(m) }
func (*ForecastingHorizon) ProtoMessage()    {}
func (*ForecastingHorizon) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{4}
}

func (m *ForecastingHorizon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForecastingHorizon.Unmarshal(m, b)
}
func (m *ForecastingHorizon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForecastingHorizon.Marshal(b, m, deterministic)
}
func (m *ForecastingHorizon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForecastingHorizon.Merge(m, src)
}
func (m *ForecastingHorizon) XXX_Size() int {
	return xxx_messageInfo_ForecastingHorizon.Size(m)
}
func (m *ForecastingHorizon) XXX_DiscardUnknown() {
	xxx_messageInfo_ForecastingHorizon.DiscardUnknown(m)
}

var xxx_messageInfo_ForecastingHorizon proto.InternalMessageInfo

func (m *ForecastingHorizon) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ForecastingHorizon) GetColumnIndex() int32 {
	if m != nil {
		return m.ColumnIndex
	}
	return 0
}

func (m *ForecastingHorizon) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *ForecastingHorizon) GetHorizonValue() float64 {
	if m != nil {
		return m.HorizonValue
	}
	return 0
}

type ProblemInput struct {
	// Should match one of input datasets given to the pipeline search.
	// Every "Dataset" object has an "id" associated with it and is available
	// in its metadata. That ID is then used here to reference those inputs.
	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Targets should resolve to columns in a given dataset.
	Targets []*ProblemTarget `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	// A list of privileged data columns related to unavailable attributes during testing.
	// These columns do not have data available in the test split of a dataset.
	PrivilegedData       []*ProblemPrivilegedData `protobuf:"bytes,3,rep,name=privileged_data,json=privilegedData,proto3" json:"privileged_data,omitempty"`
	ForecastingHorizon   *ForecastingHorizon      `protobuf:"bytes,4,opt,name=forecasting_horizon,json=forecastingHorizon,proto3" json:"forecasting_horizon,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ProblemInput) Reset()         { *m = ProblemInput{} }
func (m *ProblemInput) String() string { return proto.CompactTextString(m) }
func (*ProblemInput) ProtoMessage()    {}
func (*ProblemInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{5}
}

func (m *ProblemInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemInput.Unmarshal(m, b)
}
func (m *ProblemInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemInput.Marshal(b, m, deterministic)
}
func (m *ProblemInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemInput.Merge(m, src)
}
func (m *ProblemInput) XXX_Size() int {
	return xxx_messageInfo_ProblemInput.Size(m)
}
func (m *ProblemInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemInput.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemInput proto.InternalMessageInfo

func (m *ProblemInput) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *ProblemInput) GetTargets() []*ProblemTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *ProblemInput) GetPrivilegedData() []*ProblemPrivilegedData {
	if m != nil {
		return m.PrivilegedData
	}
	return nil
}

func (m *ProblemInput) GetForecastingHorizon() *ForecastingHorizon {
	if m != nil {
		return m.ForecastingHorizon
	}
	return nil
}

type DataAugmentation struct {
	Domain               []string `protobuf:"bytes,1,rep,name=domain,proto3" json:"domain,omitempty"`
	Keywords             []string `protobuf:"bytes,2,rep,name=keywords,proto3" json:"keywords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataAugmentation) Reset()         { *m = DataAugmentation{} }
func (m *DataAugmentation) String() string { return proto.CompactTextString(m) }
func (*DataAugmentation) ProtoMessage()    {}
func (*DataAugmentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{6}
}

func (m *DataAugmentation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataAugmentation.Unmarshal(m, b)
}
func (m *DataAugmentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataAugmentation.Marshal(b, m, deterministic)
}
func (m *DataAugmentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataAugmentation.Merge(m, src)
}
func (m *DataAugmentation) XXX_Size() int {
	return xxx_messageInfo_DataAugmentation.Size(m)
}
func (m *DataAugmentation) XXX_DiscardUnknown() {
	xxx_messageInfo_DataAugmentation.DiscardUnknown(m)
}

var xxx_messageInfo_DataAugmentation proto.InternalMessageInfo

func (m *DataAugmentation) GetDomain() []string {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *DataAugmentation) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

// Problem description matches the parsed problem description by
// the d3m_metadata.problem.parse_problem_description Python method.
// Problem outputs are not necessary for the purpose of this API
// and are needed only when executing an exported pipeline, but then
// TA2 gets full problem description anyway directly.
type ProblemDescription struct {
	Problem *Problem        `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
	Inputs  []*ProblemInput `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// ID of this problem. Required.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Version of this problem.
	Version              string              `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Name                 string              `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description          string              `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Digest               string              `protobuf:"bytes,7,opt,name=digest,proto3" json:"digest,omitempty"`
	DataAugmentation     []*DataAugmentation `protobuf:"bytes,8,rep,name=data_augmentation,json=dataAugmentation,proto3" json:"data_augmentation,omitempty"`
	OtherNames           []string            `protobuf:"bytes,9,rep,name=other_names,json=otherNames,proto3" json:"other_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProblemDescription) Reset()         { *m = ProblemDescription{} }
func (m *ProblemDescription) String() string { return proto.CompactTextString(m) }
func (*ProblemDescription) ProtoMessage()    {}
func (*ProblemDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{7}
}

func (m *ProblemDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProblemDescription.Unmarshal(m, b)
}
func (m *ProblemDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProblemDescription.Marshal(b, m, deterministic)
}
func (m *ProblemDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemDescription.Merge(m, src)
}
func (m *ProblemDescription) XXX_Size() int {
	return xxx_messageInfo_ProblemDescription.Size(m)
}
func (m *ProblemDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemDescription.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemDescription proto.InternalMessageInfo

func (m *ProblemDescription) GetProblem() *Problem {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *ProblemDescription) GetInputs() []*ProblemInput {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *ProblemDescription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProblemDescription) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ProblemDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProblemDescription) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProblemDescription) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *ProblemDescription) GetDataAugmentation() []*DataAugmentation {
	if m != nil {
		return m.DataAugmentation
	}
	return nil
}

func (m *ProblemDescription) GetOtherNames() []string {
	if m != nil {
		return m.OtherNames
	}
	return nil
}

func init() {
	proto.RegisterEnum("TaskKeyword", TaskKeyword_name, TaskKeyword_value)
	proto.RegisterEnum("PerformanceMetric", PerformanceMetric_name, PerformanceMetric_value)
	proto.RegisterType((*ProblemPerformanceMetric)(nil), "ProblemPerformanceMetric")
	proto.RegisterType((*Problem)(nil), "Problem")
	proto.RegisterType((*ProblemTarget)(nil), "ProblemTarget")
	proto.RegisterType((*ProblemPrivilegedData)(nil), "ProblemPrivilegedData")
	proto.RegisterType((*ForecastingHorizon)(nil), "ForecastingHorizon")
	proto.RegisterType((*ProblemInput)(nil), "ProblemInput")
	proto.RegisterType((*DataAugmentation)(nil), "DataAugmentation")
	proto.RegisterType((*ProblemDescription)(nil), "ProblemDescription")
}

func init() { proto.RegisterFile("problem.proto", fileDescriptor_b319862c9661813c) }

var fileDescriptor_b319862c9661813c = []byte{
	// 1287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4b, 0x72, 0xdb, 0x46,
	0x13, 0xfe, 0x41, 0x4a, 0x7c, 0x34, 0x1f, 0x1a, 0x8d, 0x2c, 0x19, 0x7e, 0xfd, 0xa6, 0x99, 0x4a,
	0xa2, 0xf2, 0x82, 0x55, 0x56, 0xf6, 0x49, 0x8d, 0x80, 0xa1, 0x34, 0x16, 0x1e, 0xcc, 0x00, 0x60,
	0x2c, 0x6f, 0xa6, 0x20, 0x12, 0x96, 0x51, 0x22, 0x09, 0x06, 0x80, 0x9c, 0xc7, 0x09, 0x72, 0x8a,
	0xdc, 0x20, 0x55, 0x59, 0x66, 0x99, 0x93, 0xe4, 0x06, 0xb9, 0x43, 0x6a, 0x06, 0x20, 0x25, 0x51,
	0x4e, 0x79, 0x97, 0xdd, 0xf4, 0xd7, 0x3d, 0xdd, 0x5f, 0x7f, 0xdd, 0x18, 0x12, 0x3a, 0xcb, 0x34,
	0xb9, 0x98, 0x45, 0xf3, 0xc1, 0x32, 0x4d, 0xf2, 0xa4, 0xff, 0x3d, 0xe8, 0xa3, 0x02, 0x18, 0x45,
	0xe9, 0xbb, 0x24, 0x9d, 0x87, 0x8b, 0x49, 0x64, 0x47, 0x79, 0x1a, 0x4f, 0xf0, 0x4b, 0xa8, 0xcd,
	0xd5, 0x49, 0xd7, 0x7a, 0xda, 0x61, 0xf7, 0x08, 0x0f, 0xee, 0xc5, 0xf0, 0x32, 0x02, 0xb7, 0x41,
	0xbb, 0xd2, 0x2b, 0x3d, 0xed, 0x70, 0x9b, 0x6b, 0x57, 0xf8, 0x09, 0x34, 0x97, 0x49, 0x26, 0x66,
	0xe1, 0x45, 0x34, 0xd3, 0xab, 0x3d, 0xed, 0xb0, 0xc9, 0x1b, 0xcb, 0x24, 0xb3, 0xa4, 0xdd, 0xff,
	0x45, 0x83, 0x7a, 0x59, 0x13, 0xbf, 0x82, 0x4e, 0x1e, 0x66, 0x57, 0xe2, 0x2a, 0xfa, 0xe9, 0x87,
	0x24, 0x9d, 0x66, 0x7a, 0xa3, 0x57, 0x3d, 0xec, 0x1e, 0xb5, 0x07, 0x7e, 0x98, 0x5d, 0x9d, 0x15,
	0x20, 0x6f, 0xe7, 0x37, 0x46, 0x86, 0x5f, 0xc3, 0xde, 0xf2, 0x86, 0x86, 0x28, 0xea, 0x67, 0x7a,
	0xbd, 0x57, 0x3d, 0x6c, 0x1d, 0x3d, 0x1a, 0xfc, 0x5b, 0x37, 0x1c, 0x2f, 0x37, 0xa1, 0xac, 0xff,
	0xa7, 0x06, 0x9d, 0xf2, 0x82, 0x1f, 0xa6, 0x97, 0x51, 0x8e, 0x5f, 0x40, 0x3b, 0x57, 0x27, 0x11,
	0x2f, 0xa6, 0xd1, 0x8f, 0xaa, 0xf3, 0x6d, 0xde, 0x2a, 0x30, 0x26, 0x21, 0xfc, 0x1c, 0x5a, 0x69,
	0x94, 0x25, 0xd7, 0xe9, 0x24, 0x12, 0xf1, 0x54, 0x35, 0xdd, 0xe4, 0xb0, 0x82, 0xd8, 0x54, 0xe6,
	0x98, 0x24, 0xb3, 0xeb, 0xf9, 0xa2, 0xcc, 0x51, 0x2d, 0x72, 0x14, 0xd8, 0x3a, 0x47, 0x19, 0xb2,
	0x08, 0xe7, 0x91, 0xbe, 0x55, 0xe4, 0x28, 0x20, 0x27, 0x9c, 0x47, 0xf8, 0x4b, 0xd8, 0x99, 0xcc,
	0xae, 0xb3, 0x3c, 0x4a, 0x33, 0xb1, 0xb8, 0x9e, 0x5f, 0x44, 0xa9, 0xbe, 0xad, 0xd2, 0x74, 0x57,
	0xb0, 0xa3, 0xd0, 0xfe, 0xef, 0x1a, 0xec, 0xaf, 0x7a, 0x4e, 0xe3, 0x0f, 0xf1, 0x2c, 0xba, 0x8c,
	0xa6, 0x66, 0x98, 0x87, 0xf8, 0x08, 0xf6, 0x97, 0x6b, 0x44, 0x4c, 0xc3, 0x3c, 0xbc, 0xd3, 0xd3,
	0xde, 0xf2, 0x4e, 0xf8, 0x7f, 0xd7, 0x5b, 0xff, 0x57, 0x0d, 0xf0, 0x30, 0x49, 0xa3, 0x49, 0x98,
	0xe5, 0xf1, 0xe2, 0xf2, 0x34, 0x49, 0xe3, 0x9f, 0x93, 0xc5, 0x66, 0x6d, 0xed, 0x93, 0xb5, 0x2b,
	0x9f, 0xac, 0x5d, 0xbd, 0xa7, 0xeb, 0x67, 0xd0, 0x79, 0x5f, 0xd4, 0x13, 0x1f, 0xc2, 0xd9, 0x75,
	0x41, 0x4f, 0xe3, 0xed, 0x12, 0x1c, 0x4b, 0xac, 0xff, 0x97, 0x06, 0xed, 0x52, 0x53, 0xb6, 0x58,
	0x5e, 0xe7, 0xf8, 0x19, 0x80, 0xd4, 0x2f, 0x93, 0x6b, 0xb1, 0x62, 0xd6, 0x2c, 0x11, 0x36, 0xc5,
	0x87, 0x50, 0x2f, 0x16, 0x24, 0xd3, 0x2b, 0x6a, 0x0d, 0xbb, 0x83, 0x3b, 0x5b, 0xc5, 0x57, 0x6e,
	0xfc, 0x0d, 0xec, 0x6c, 0xcc, 0x44, 0xaf, 0xaa, 0x1b, 0x07, 0x83, 0x8f, 0x0e, 0x91, 0x77, 0xef,
	0x4e, 0x09, 0x9b, 0xb0, 0xf7, 0xee, 0x46, 0x3a, 0x51, 0xd2, 0x56, 0x5d, 0xb4, 0x8e, 0xf6, 0x06,
	0xf7, 0x65, 0xe5, 0xf8, 0xdd, 0x3d, 0xac, 0x3f, 0x04, 0x24, 0xb3, 0x91, 0xeb, 0xcb, 0x79, 0xb4,
	0xc8, 0xc3, 0x3c, 0x4e, 0x16, 0xf8, 0x00, 0x6a, 0xd3, 0x64, 0x1e, 0xc6, 0x0b, 0x5d, 0xeb, 0x55,
	0x0f, 0x9b, 0xbc, 0xb4, 0xf0, 0x63, 0x68, 0xac, 0xbf, 0xce, 0x8a, 0xf2, 0xac, 0xed, 0xfe, 0x1f,
	0x15, 0xc0, 0x25, 0x6f, 0x33, 0xca, 0x26, 0x69, 0xbc, 0x54, 0xa9, 0xfa, 0x50, 0x2f, 0x5f, 0x19,
	0xa5, 0x55, 0xeb, 0xa8, 0xb1, 0xea, 0x8e, 0xaf, 0x1c, 0xf8, 0x73, 0xa8, 0xc5, 0x52, 0xdb, 0x95,
	0x64, 0x9d, 0xc1, 0x6d, 0xc5, 0x79, 0xe9, 0xc4, 0x5d, 0xa8, 0xc4, 0xd3, 0x72, 0x8e, 0x95, 0x78,
	0x8a, 0x75, 0xa8, 0x7f, 0x88, 0xd2, 0x2c, 0x2e, 0x7b, 0x6e, 0xf2, 0x95, 0x89, 0x31, 0x6c, 0xa9,
	0x99, 0x6f, 0x2b, 0x58, 0x9d, 0x71, 0x0f, 0x5a, 0xd3, 0x1b, 0x5e, 0x7a, 0x4d, 0xb9, 0x6e, 0x43,
	0xaa, 0xeb, 0xf8, 0x32, 0xca, 0x72, 0xbd, 0xae, 0x9c, 0xa5, 0x85, 0xbf, 0x86, 0x5d, 0xf5, 0xc5,
	0x84, 0xb7, 0x24, 0x52, 0x8f, 0x53, 0xeb, 0x68, 0x77, 0xb0, 0xa9, 0x1d, 0x47, 0xd3, 0x4d, 0x35,
	0x9f, 0x43, 0x2b, 0xc9, 0xdf, 0x47, 0xa9, 0xda, 0xc3, 0x4c, 0x6f, 0x2a, 0xe1, 0x40, 0x41, 0x72,
	0x0f, 0xb3, 0x97, 0x7f, 0x6f, 0x41, 0xeb, 0xd6, 0x23, 0x87, 0x1f, 0xc3, 0x81, 0x4f, 0xbc, 0x33,
	0x71, 0x46, 0xcf, 0xbf, 0x73, 0xb9, 0x29, 0x02, 0xc7, 0xa4, 0x43, 0xe6, 0x50, 0x13, 0xfd, 0x0f,
	0x63, 0xe8, 0x1a, 0x16, 0xf1, 0x3c, 0x36, 0x64, 0x06, 0xf1, 0x99, 0xeb, 0x20, 0x0d, 0x77, 0x01,
	0x38, 0x3d, 0xe1, 0xd4, 0xf3, 0xa4, 0x5d, 0x91, 0xb6, 0x61, 0x05, 0x9e, 0x4f, 0x39, 0x73, 0x4e,
	0x50, 0x15, 0xef, 0xc1, 0x8e, 0xc5, 0x9c, 0x33, 0x31, 0xe2, 0xd4, 0x64, 0x86, 0xba, 0xb4, 0x85,
	0xf7, 0x61, 0x77, 0x4c, 0xb9, 0x4f, 0xdf, 0x08, 0xc7, 0xb5, 0x99, 0x53, 0xe4, 0xda, 0xc6, 0x8f,
	0x60, 0xbf, 0x84, 0x37, 0xca, 0xd4, 0xf0, 0x43, 0xd8, 0x33, 0x5c, 0xdb, 0x0e, 0x1c, 0xe6, 0x9f,
	0x0b, 0x93, 0xfa, 0xb4, 0x48, 0x55, 0x97, 0x9c, 0x4e, 0x38, 0x19, 0x9d, 0x0a, 0x9b, 0xf8, 0xc6,
	0xa9, 0xac, 0xd9, 0xc0, 0x3b, 0xd0, 0x1a, 0xba, 0x9c, 0x1a, 0xc4, 0xf3, 0x25, 0xd0, 0xc4, 0x4f,
	0xe0, 0xa1, 0xe1, 0x5a, 0x16, 0x39, 0x76, 0x39, 0xf1, 0xd9, 0x98, 0x8a, 0x21, 0xb3, 0x4a, 0x86,
	0x80, 0x1f, 0x00, 0x72, 0x8f, 0x5f, 0x53, 0xc3, 0xbf, 0x95, 0xb7, 0x25, 0xf3, 0x7a, 0xd4, 0x66,
	0x5e, 0x30, 0xa2, 0x7c, 0xcc, 0x3c, 0x6a, 0xa2, 0x36, 0x06, 0xa8, 0x1d, 0x33, 0x87, 0xf0, 0x73,
	0xd4, 0x91, 0x7d, 0xda, 0x81, 0xe5, 0x33, 0xc5, 0x14, 0x75, 0xd7, 0xb6, 0x45, 0x8e, 0xa9, 0x85,
	0x76, 0xa4, 0x1d, 0x38, 0x6c, 0x4c, 0x38, 0x23, 0x3e, 0x45, 0x08, 0x23, 0x68, 0x2b, 0xff, 0x0a,
	0xd9, 0x95, 0x2c, 0xdd, 0x31, 0xe5, 0x16, 0x19, 0x8d, 0x24, 0x11, 0x2c, 0x4b, 0x3a, 0xae, 0x73,
	0x1b, 0xdb, 0xc3, 0x2d, 0xa8, 0xfb, 0xe4, 0x38, 0xb0, 0x08, 0x47, 0x0f, 0x0a, 0xad, 0x2d, 0x25,
	0x09, 0xb1, 0xd0, 0x3e, 0x6e, 0xc2, 0x36, 0xb3, 0xc9, 0x09, 0x45, 0x07, 0xf2, 0x48, 0x02, 0x93,
	0xb9, 0xe8, 0xa1, 0x3c, 0x8e, 0x99, 0x49, 0x5d, 0xa4, 0x4b, 0xc2, 0xde, 0x88, 0x52, 0xe3, 0x14,
	0x3d, 0xc2, 0x0d, 0xd8, 0xf2, 0xe9, 0x1b, 0x1f, 0x3d, 0x96, 0x01, 0x4a, 0x32, 0xf4, 0x64, 0xcd,
	0xba, 0xb0, 0x9f, 0x4a, 0x4e, 0x3e, 0xb3, 0xa9, 0xf0, 0x28, 0x67, 0xd4, 0x43, 0xcf, 0x64, 0xfd,
	0x13, 0xee, 0x06, 0x23, 0x6a, 0xa2, 0xff, 0xcb, 0xe8, 0x13, 0xea, 0x7a, 0x23, 0xe2, 0x33, 0x62,
	0xa1, 0xe7, 0x92, 0x30, 0xa7, 0xb6, 0xeb, 0xcb, 0x78, 0xc7, 0x93, 0x84, 0x7b, 0xb2, 0x8c, 0x15,
	0x8c, 0x18, 0x7a, 0x21, 0x75, 0xb5, 0x99, 0x27, 0x61, 0x61, 0x53, 0x9f, 0x98, 0xc4, 0x27, 0xa8,
	0xff, 0xf2, 0xb7, 0x2a, 0xec, 0xde, 0xff, 0x89, 0x97, 0xb1, 0xd4, 0xe7, 0xcc, 0xb8, 0xb3, 0x6f,
	0x6d, 0x68, 0x10, 0xc3, 0x08, 0x38, 0x31, 0xce, 0x91, 0x86, 0x3b, 0xd0, 0x1c, 0x71, 0x6a, 0xb0,
	0x72, 0xd1, 0x00, 0x6a, 0x72, 0xc4, 0x96, 0x85, 0xaa, 0xb8, 0x06, 0x95, 0xe1, 0x2b, 0xb4, 0x25,
	0x2f, 0x0c, 0x5f, 0x09, 0x9b, 0x19, 0xdc, 0x45, 0xdb, 0x2b, 0x8b, 0x48, 0xab, 0x26, 0x3b, 0xe1,
	0xae, 0x21, 0x48, 0x60, 0xa0, 0x3a, 0xde, 0x85, 0x4e, 0x69, 0x94, 0xd1, 0x8d, 0x3b, 0x90, 0xba,
	0xd2, 0xc4, 0x07, 0x80, 0x6d, 0x4a, 0x1c, 0xe1, 0x7d, 0x1b, 0x10, 0x4e, 0x4d, 0x41, 0x39, 0x77,
	0x39, 0x02, 0xb9, 0x4e, 0xdc, 0x75, 0x7d, 0xf1, 0x11, 0x67, 0x4b, 0x6e, 0xaa, 0xc2, 0xc9, 0xb1,
	0xe7, 0x5a, 0x81, 0x4f, 0x4b, 0x47, 0x5b, 0xf2, 0xe7, 0xab, 0x68, 0xd4, 0xc1, 0x2f, 0xe0, 0x99,
	0xe3, 0x72, 0x9b, 0x58, 0xec, 0x2d, 0x35, 0x85, 0x1d, 0xf8, 0x01, 0xb1, 0x04, 0x73, 0x86, 0x12,
	0x53, 0x3b, 0xd8, 0xc5, 0x4f, 0x41, 0x7f, 0x4d, 0x0c, 0x83, 0x70, 0x53, 0x78, 0xcc, 0x66, 0x16,
	0xe1, 0x72, 0xfb, 0x3d, 0xc3, 0xe5, 0x14, 0xed, 0x48, 0x76, 0x6b, 0x3d, 0x04, 0xf1, 0x85, 0xef,
	0x8e, 0xc4, 0x19, 0x42, 0xf8, 0x0b, 0xe8, 0x6f, 0xee, 0xb3, 0x20, 0x63, 0xca, 0xc9, 0x09, 0x15,
	0x37, 0x02, 0xee, 0xca, 0x8d, 0x3c, 0x25, 0xb6, 0x2d, 0xe7, 0x63, 0xb9, 0x9e, 0x87, 0xb0, 0x9c,
	0x1d, 0x27, 0xce, 0x19, 0x9a, 0xa8, 0x29, 0x4a, 0x6c, 0x7a, 0x0c, 0x6f, 0x1b, 0xcb, 0x78, 0x19,
	0xcd, 0xe2, 0x45, 0x74, 0x51, 0x53, 0xff, 0xd5, 0xbe, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0x10,
	0x57, 0x41, 0xfb, 0xbc, 0x09, 0x00, 0x00,
}
