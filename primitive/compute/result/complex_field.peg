package result

# Parser for an array field exported from a Python PANDAS dataframe via its to_csv() method.
# The exported file is RFC 4180 compatible, and is loaded using the CSV loader from the golang
# standard lib.  The loader handles most of the escaping.  The parser can handle standard
#
# "[10, 20, 30, \"forty  & fifty\"]"
#
# parses to the Go type:
#
# []interface{"10", "20", "30", "forty & fifty"}
#
# String output of an ndarray (which uses space as a separator and will insert newlines)
# is also handled.  Example:
#
# "[10 20  30 40  50 60\n
#   70 80]"

# generated go struct - accessible via `p` in attached code blocks
type ComplexField Peg {
    arrayElements
}

ComplexField <- (array / nd_array / gc_array) !.

# non-terminals for python arrays and tuples
array <- ws* obracket { p.pushArray() } ws* array_contents ws* cbracket { p.popArray() } /
    ws* oparen { p.pushArray() } ws* tuple_contents ws* cparen { p.popArray() }
array_contents <- (item ws* comma ws*)* item ws*
tuple_contents <- (item ws* comma ws*)+ (ws* item ws*)?
item <- array / string / <value> { p.addElement(buffer[begin:end]) }

# non-terminals for numpy arrays
nd_array <- ws* obracket { p.pushArray() } ws* nd_array_contents ws* cbracket { p.popArray() }
nd_array_contents <- (nd_item (ws / (lf ws?)))* (nd_item ws*)?
nd_item <- nd_array / string / <value> { p.addElement(buffer[begin:end]) }

# non-terminals for gradcam output
gc_array <- ws* obracket { p.pushArray() } ws* gc_array_contents ws* cbracket { p.popArray() }
gc_array_contents <- (gc_item (comma / lf) ws*)* (gc_item ws*)?
gc_item <- gc_array / string / <value> { p.addElement(buffer[begin:end]) }

# common non-terminals
string <- dquote_string / squote_string
dquote_string <- escdquote <(textdata / squote / lf / cr / obracket / cbracket / oparen / cparen / comma)*> escdquote { p.addElement(buffer[begin:end]) }
squote_string <- squote <(escsquote / escdquote / textdata / lf / cr / obracket / cbracket / oparen / cparen)*> squote { p.addElement(buffer[begin:end]) }
value <- negative? number+ (decimal_point (number+ (negative / positive)? number*)?)?

# terminals
ws <- ' '
comma <- ','
lf <- '\n'
cr <- '\r'
escdquote <- '\"'
escsquote <- '\\\''
squote <- '\''
obracket <- '['
cbracket <- ']'
oparen <- '('
cparen <- ')'
number <- [a-zA-Z0-9]
negative <- '-'
positive <- '+'
decimal_point <- '.'
textdata <- [a-zA-Z0-9 !#$&%*+\-./:;<->?\\^_`{|}~]
