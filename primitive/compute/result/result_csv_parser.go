//
//   Copyright Â© 2021 Uncharted Software Inc.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

package result

import (
	"encoding/csv"
	"io"
	"os"
	"strings"

	"github.com/pkg/errors"
)

// ParseResultCSV parses a result CSV that is compliant with RFC 4180, with
// additional logic added to extract nested arrays generated by PANDAS to_csv() calls.
func ParseResultCSV(path string) ([][]interface{}, error) {
	return parseCsv(path, true)
}

// ParseResultCSVShallow parses a result CSV that is compliant with RFC 4180.  PANDAS nested structs
// are treated as strings.
func ParseResultCSVShallow(path string) ([][]interface{}, error) {
	return parseCsv(path, false)
}

func parseCsv(path string, deepParse bool) ([][]interface{}, error) {
	csvFile, err := os.Open(path)
	if err != nil {
		return nil, errors.Wrapf(err, "error opening result file '%s'", path)
	}

	// instantiate the parser
	field := &ComplexField{}
	if err := field.Init(); err != nil {
		return nil, errors.Wrap(err, "failed to initialize complex field parser")
	}

	csvReader := csv.NewReader(csvFile)
	results := [][]interface{}{}
	for {
		line, err := csvReader.Read()
		if err == io.EOF {
			break
		} else if err != nil {
			return nil, errors.Wrapf(err, "error parsing result file - '%s'", line)
		}

		record := []interface{}{}
		for _, elem := range line {
			if deepParse {
				// parse value into float, int, string, or array
				record = append(record, ParseVal(elem, field))
			} else {
				record = append(record, elem)
			}
		}
		results = append(results, record)
	}
	return results, nil
}

// ParseVal parses a field value.
func ParseVal(val string, field *ComplexField) interface{} {
	// check to see if we can parse the value as an array - if not we leave it as a string
	arrayVal, err := parseArray(val, field)
	if err == nil {
		return arrayVal
	}
	return val
}

func parseArray(val string, field *ComplexField) ([]interface{}, error) {
	field.Buffer = val
	field.Reset()

	err := field.Parse()
	if err != nil {
		return nil, err
	}

	field.Execute()
	return field.arrayElements.elements, nil
}

// Structure to interact with peg parser
type arrayElements struct {
	elements []interface{}
	stack    [][]interface{}
}

func (a *arrayElements) lastIdx() int {
	return len(a.stack) - 1
}

// Called by peg parse
func (a *arrayElements) addElement(element string) {
	// there is no single quote escape in Go so we need to pull it out of any element we process
	element = strings.Replace(element, "\\'", "'", -1)
	a.stack[a.lastIdx()] = append(a.stack[a.lastIdx()], element)
}

func (a *arrayElements) pushArray() {
	a.stack = append(a.stack, []interface{}{})
}

func (a *arrayElements) popArray() {
	a.elements, a.stack = a.stack[a.lastIdx()], a.stack[:a.lastIdx()]
	if len(a.stack) != 0 {
		a.stack[a.lastIdx()] = append(a.stack[a.lastIdx()], a.elements)
	}
}
