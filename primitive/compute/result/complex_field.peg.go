package result

// Code generated by peg -inline ./primitive/compute/result/complex_field.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleComplexField
	rulearray
	rulearray_contents
	ruletuple_contents
	rulend_array
	rulend_array_contents
	ruleitem
	rulend_item
	rulestring
	ruledquote_string
	rulesquote_string
	rulevalue
	rulews
	rulecomma
	rulelf
	rulecr
	ruleescdquote
	ruleescsquote
	rulesquote
	ruleobracket
	rulecbracket
	ruleoparen
	rulecparen
	rulenumber
	rulenegative
	rulepositive
	ruledecimal_point
	ruletextdata
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	rulePegText
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
)

var rul3s = [...]string{
	"Unknown",
	"ComplexField",
	"array",
	"array_contents",
	"tuple_contents",
	"nd_array",
	"nd_array_contents",
	"item",
	"nd_item",
	"string",
	"dquote_string",
	"squote_string",
	"value",
	"ws",
	"comma",
	"lf",
	"cr",
	"escdquote",
	"escsquote",
	"squote",
	"obracket",
	"cbracket",
	"oparen",
	"cparen",
	"number",
	"negative",
	"positive",
	"decimal_point",
	"textdata",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"PegText",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[34m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type ComplexField struct {
	arrayElements

	Buffer string
	buffer []rune
	rules  [40]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *ComplexField) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *ComplexField) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *ComplexField
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *ComplexField) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *ComplexField) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *ComplexField) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.pushArray()
		case ruleAction1:
			p.popArray()
		case ruleAction2:
			p.pushArray()
		case ruleAction3:
			p.popArray()
		case ruleAction4:
			p.pushArray()
		case ruleAction5:
			p.popArray()
		case ruleAction6:
			p.addElement(buffer[begin:end])
		case ruleAction7:
			p.addElement(buffer[begin:end])
		case ruleAction8:
			p.addElement(buffer[begin:end])
		case ruleAction9:
			p.addElement(buffer[begin:end])

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*ComplexField) error {
	return func(p *ComplexField) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*ComplexField) error {
	return func(p *ComplexField) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *ComplexField) Init(options ...func(*ComplexField) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 ComplexField <- <((array / nd_array) !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rulearray]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[rulend_array]() {
						goto l0
					}
				}
			l2:
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l0
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleComplexField, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 array <- <((ws* obracket Action0 ws* array_contents ws* cbracket Action1) / (ws* oparen Action2 ws* tuple_contents ws* cparen Action3))> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
				{
					position7, tokenIndex7 := position, tokenIndex
				l9:
					{
						position10, tokenIndex10 := position, tokenIndex
						if !_rules[rulews]() {
							goto l10
						}
						goto l9
					l10:
						position, tokenIndex = position10, tokenIndex10
					}
					if !_rules[ruleobracket]() {
						goto l8
					}
					{
						add(ruleAction0, position)
					}
				l12:
					{
						position13, tokenIndex13 := position, tokenIndex
						if !_rules[rulews]() {
							goto l13
						}
						goto l12
					l13:
						position, tokenIndex = position13, tokenIndex13
					}
					{
						position14 := position
					l15:
						{
							position16, tokenIndex16 := position, tokenIndex
							if !_rules[ruleitem]() {
								goto l16
							}
						l17:
							{
								position18, tokenIndex18 := position, tokenIndex
								if !_rules[rulews]() {
									goto l18
								}
								goto l17
							l18:
								position, tokenIndex = position18, tokenIndex18
							}
							if !_rules[rulecomma]() {
								goto l16
							}
						l19:
							{
								position20, tokenIndex20 := position, tokenIndex
								if !_rules[rulews]() {
									goto l20
								}
								goto l19
							l20:
								position, tokenIndex = position20, tokenIndex20
							}
							goto l15
						l16:
							position, tokenIndex = position16, tokenIndex16
						}
						if !_rules[ruleitem]() {
							goto l8
						}
					l21:
						{
							position22, tokenIndex22 := position, tokenIndex
							if !_rules[rulews]() {
								goto l22
							}
							goto l21
						l22:
							position, tokenIndex = position22, tokenIndex22
						}
						add(rulearray_contents, position14)
					}
				l23:
					{
						position24, tokenIndex24 := position, tokenIndex
						if !_rules[rulews]() {
							goto l24
						}
						goto l23
					l24:
						position, tokenIndex = position24, tokenIndex24
					}
					if !_rules[rulecbracket]() {
						goto l8
					}
					{
						add(ruleAction1, position)
					}
					goto l7
				l8:
					position, tokenIndex = position7, tokenIndex7
				l26:
					{
						position27, tokenIndex27 := position, tokenIndex
						if !_rules[rulews]() {
							goto l27
						}
						goto l26
					l27:
						position, tokenIndex = position27, tokenIndex27
					}
					if !_rules[ruleoparen]() {
						goto l5
					}
					{
						add(ruleAction2, position)
					}
				l29:
					{
						position30, tokenIndex30 := position, tokenIndex
						if !_rules[rulews]() {
							goto l30
						}
						goto l29
					l30:
						position, tokenIndex = position30, tokenIndex30
					}
					{
						position31 := position
						if !_rules[ruleitem]() {
							goto l5
						}
					l34:
						{
							position35, tokenIndex35 := position, tokenIndex
							if !_rules[rulews]() {
								goto l35
							}
							goto l34
						l35:
							position, tokenIndex = position35, tokenIndex35
						}
						if !_rules[rulecomma]() {
							goto l5
						}
					l36:
						{
							position37, tokenIndex37 := position, tokenIndex
							if !_rules[rulews]() {
								goto l37
							}
							goto l36
						l37:
							position, tokenIndex = position37, tokenIndex37
						}
					l32:
						{
							position33, tokenIndex33 := position, tokenIndex
							if !_rules[ruleitem]() {
								goto l33
							}
						l38:
							{
								position39, tokenIndex39 := position, tokenIndex
								if !_rules[rulews]() {
									goto l39
								}
								goto l38
							l39:
								position, tokenIndex = position39, tokenIndex39
							}
							if !_rules[rulecomma]() {
								goto l33
							}
						l40:
							{
								position41, tokenIndex41 := position, tokenIndex
								if !_rules[rulews]() {
									goto l41
								}
								goto l40
							l41:
								position, tokenIndex = position41, tokenIndex41
							}
							goto l32
						l33:
							position, tokenIndex = position33, tokenIndex33
						}
						{
							position42, tokenIndex42 := position, tokenIndex
						l44:
							{
								position45, tokenIndex45 := position, tokenIndex
								if !_rules[rulews]() {
									goto l45
								}
								goto l44
							l45:
								position, tokenIndex = position45, tokenIndex45
							}
							if !_rules[ruleitem]() {
								goto l42
							}
						l46:
							{
								position47, tokenIndex47 := position, tokenIndex
								if !_rules[rulews]() {
									goto l47
								}
								goto l46
							l47:
								position, tokenIndex = position47, tokenIndex47
							}
							goto l43
						l42:
							position, tokenIndex = position42, tokenIndex42
						}
					l43:
						add(ruletuple_contents, position31)
					}
				l48:
					{
						position49, tokenIndex49 := position, tokenIndex
						if !_rules[rulews]() {
							goto l49
						}
						goto l48
					l49:
						position, tokenIndex = position49, tokenIndex49
					}
					if !_rules[rulecparen]() {
						goto l5
					}
					{
						add(ruleAction3, position)
					}
				}
			l7:
				add(rulearray, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 2 array_contents <- <((item ws* comma ws*)* item ws*)> */
		nil,
		/* 3 tuple_contents <- <((item ws* comma ws*)+ (ws* item ws*)?)> */
		nil,
		/* 4 nd_array <- <(ws* obracket Action4 ws* nd_array_contents ws* cbracket Action5)> */
		func() bool {
			position53, tokenIndex53 := position, tokenIndex
			{
				position54 := position
			l55:
				{
					position56, tokenIndex56 := position, tokenIndex
					if !_rules[rulews]() {
						goto l56
					}
					goto l55
				l56:
					position, tokenIndex = position56, tokenIndex56
				}
				if !_rules[ruleobracket]() {
					goto l53
				}
				{
					add(ruleAction4, position)
				}
			l58:
				{
					position59, tokenIndex59 := position, tokenIndex
					if !_rules[rulews]() {
						goto l59
					}
					goto l58
				l59:
					position, tokenIndex = position59, tokenIndex59
				}
				{
					position60 := position
				l61:
					{
						position62, tokenIndex62 := position, tokenIndex
						if !_rules[rulend_item]() {
							goto l62
						}
						{
							position63, tokenIndex63 := position, tokenIndex
							if !_rules[rulews]() {
								goto l64
							}
							goto l63
						l64:
							position, tokenIndex = position63, tokenIndex63
							if !_rules[rulelf]() {
								goto l62
							}
							{
								position65, tokenIndex65 := position, tokenIndex
								if !_rules[rulews]() {
									goto l65
								}
								goto l66
							l65:
								position, tokenIndex = position65, tokenIndex65
							}
						l66:
						}
					l63:
						goto l61
					l62:
						position, tokenIndex = position62, tokenIndex62
					}
					{
						position67, tokenIndex67 := position, tokenIndex
						if !_rules[rulend_item]() {
							goto l67
						}
					l69:
						{
							position70, tokenIndex70 := position, tokenIndex
							if !_rules[rulews]() {
								goto l70
							}
							goto l69
						l70:
							position, tokenIndex = position70, tokenIndex70
						}
						goto l68
					l67:
						position, tokenIndex = position67, tokenIndex67
					}
				l68:
					add(rulend_array_contents, position60)
				}
			l71:
				{
					position72, tokenIndex72 := position, tokenIndex
					if !_rules[rulews]() {
						goto l72
					}
					goto l71
				l72:
					position, tokenIndex = position72, tokenIndex72
				}
				if !_rules[rulecbracket]() {
					goto l53
				}
				{
					add(ruleAction5, position)
				}
				add(rulend_array, position54)
			}
			return true
		l53:
			position, tokenIndex = position53, tokenIndex53
			return false
		},
		/* 5 nd_array_contents <- <((nd_item (ws / (lf ws?)))* (nd_item ws*)?)> */
		nil,
		/* 6 item <- <(array / string / (<value> Action6))> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				{
					position77, tokenIndex77 := position, tokenIndex
					if !_rules[rulearray]() {
						goto l78
					}
					goto l77
				l78:
					position, tokenIndex = position77, tokenIndex77
					if !_rules[rulestring]() {
						goto l79
					}
					goto l77
				l79:
					position, tokenIndex = position77, tokenIndex77
					{
						position80 := position
						if !_rules[rulevalue]() {
							goto l75
						}
						add(rulePegText, position80)
					}
					{
						add(ruleAction6, position)
					}
				}
			l77:
				add(ruleitem, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 7 nd_item <- <(nd_array / string / (<value> Action7))> */
		func() bool {
			position82, tokenIndex82 := position, tokenIndex
			{
				position83 := position
				{
					position84, tokenIndex84 := position, tokenIndex
					if !_rules[rulend_array]() {
						goto l85
					}
					goto l84
				l85:
					position, tokenIndex = position84, tokenIndex84
					if !_rules[rulestring]() {
						goto l86
					}
					goto l84
				l86:
					position, tokenIndex = position84, tokenIndex84
					{
						position87 := position
						if !_rules[rulevalue]() {
							goto l82
						}
						add(rulePegText, position87)
					}
					{
						add(ruleAction7, position)
					}
				}
			l84:
				add(rulend_item, position83)
			}
			return true
		l82:
			position, tokenIndex = position82, tokenIndex82
			return false
		},
		/* 8 string <- <(dquote_string / squote_string)> */
		func() bool {
			position89, tokenIndex89 := position, tokenIndex
			{
				position90 := position
				{
					position91, tokenIndex91 := position, tokenIndex
					{
						position93 := position
						if !_rules[ruleescdquote]() {
							goto l92
						}
						{
							position94 := position
						l95:
							{
								position96, tokenIndex96 := position, tokenIndex
								{
									position97, tokenIndex97 := position, tokenIndex
									if !_rules[ruletextdata]() {
										goto l98
									}
									goto l97
								l98:
									position, tokenIndex = position97, tokenIndex97
									if !_rules[rulesquote]() {
										goto l99
									}
									goto l97
								l99:
									position, tokenIndex = position97, tokenIndex97
									if !_rules[rulelf]() {
										goto l100
									}
									goto l97
								l100:
									position, tokenIndex = position97, tokenIndex97
									if !_rules[rulecr]() {
										goto l101
									}
									goto l97
								l101:
									position, tokenIndex = position97, tokenIndex97
									if !_rules[ruleobracket]() {
										goto l102
									}
									goto l97
								l102:
									position, tokenIndex = position97, tokenIndex97
									if !_rules[rulecbracket]() {
										goto l103
									}
									goto l97
								l103:
									position, tokenIndex = position97, tokenIndex97
									if !_rules[ruleoparen]() {
										goto l104
									}
									goto l97
								l104:
									position, tokenIndex = position97, tokenIndex97
									if !_rules[rulecparen]() {
										goto l105
									}
									goto l97
								l105:
									position, tokenIndex = position97, tokenIndex97
									if !_rules[rulecomma]() {
										goto l96
									}
								}
							l97:
								goto l95
							l96:
								position, tokenIndex = position96, tokenIndex96
							}
							add(rulePegText, position94)
						}
						if !_rules[ruleescdquote]() {
							goto l92
						}
						{
							add(ruleAction8, position)
						}
						add(ruledquote_string, position93)
					}
					goto l91
				l92:
					position, tokenIndex = position91, tokenIndex91
					{
						position107 := position
						if !_rules[rulesquote]() {
							goto l89
						}
						{
							position108 := position
						l109:
							{
								position110, tokenIndex110 := position, tokenIndex
								{
									position111, tokenIndex111 := position, tokenIndex
									{
										position113 := position
										if buffer[position] != rune('\\') {
											goto l112
										}
										position++
										if buffer[position] != rune('\'') {
											goto l112
										}
										position++
										add(ruleescsquote, position113)
									}
									goto l111
								l112:
									position, tokenIndex = position111, tokenIndex111
									if !_rules[ruleescdquote]() {
										goto l114
									}
									goto l111
								l114:
									position, tokenIndex = position111, tokenIndex111
									if !_rules[ruletextdata]() {
										goto l115
									}
									goto l111
								l115:
									position, tokenIndex = position111, tokenIndex111
									if !_rules[rulelf]() {
										goto l116
									}
									goto l111
								l116:
									position, tokenIndex = position111, tokenIndex111
									if !_rules[rulecr]() {
										goto l117
									}
									goto l111
								l117:
									position, tokenIndex = position111, tokenIndex111
									if !_rules[ruleobracket]() {
										goto l118
									}
									goto l111
								l118:
									position, tokenIndex = position111, tokenIndex111
									if !_rules[rulecbracket]() {
										goto l119
									}
									goto l111
								l119:
									position, tokenIndex = position111, tokenIndex111
									if !_rules[ruleoparen]() {
										goto l120
									}
									goto l111
								l120:
									position, tokenIndex = position111, tokenIndex111
									if !_rules[rulecparen]() {
										goto l110
									}
								}
							l111:
								goto l109
							l110:
								position, tokenIndex = position110, tokenIndex110
							}
							add(rulePegText, position108)
						}
						if !_rules[rulesquote]() {
							goto l89
						}
						{
							add(ruleAction9, position)
						}
						add(rulesquote_string, position107)
					}
				}
			l91:
				add(rulestring, position90)
			}
			return true
		l89:
			position, tokenIndex = position89, tokenIndex89
			return false
		},
		/* 9 dquote_string <- <(escdquote <(textdata / squote / lf / cr / obracket / cbracket / oparen / cparen / comma)*> escdquote Action8)> */
		nil,
		/* 10 squote_string <- <(squote <(escsquote / escdquote / textdata / lf / cr / obracket / cbracket / oparen / cparen)*> squote Action9)> */
		nil,
		/* 11 value <- <(negative? number+ (decimal_point (number+ (negative / positive)? number*)?)?)> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				{
					position126, tokenIndex126 := position, tokenIndex
					if !_rules[rulenegative]() {
						goto l126
					}
					goto l127
				l126:
					position, tokenIndex = position126, tokenIndex126
				}
			l127:
				if !_rules[rulenumber]() {
					goto l124
				}
			l128:
				{
					position129, tokenIndex129 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l129
					}
					goto l128
				l129:
					position, tokenIndex = position129, tokenIndex129
				}
				{
					position130, tokenIndex130 := position, tokenIndex
					{
						position132 := position
						if buffer[position] != rune('.') {
							goto l130
						}
						position++
						add(ruledecimal_point, position132)
					}
					{
						position133, tokenIndex133 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l133
						}
					l135:
						{
							position136, tokenIndex136 := position, tokenIndex
							if !_rules[rulenumber]() {
								goto l136
							}
							goto l135
						l136:
							position, tokenIndex = position136, tokenIndex136
						}
						{
							position137, tokenIndex137 := position, tokenIndex
							{
								position139, tokenIndex139 := position, tokenIndex
								if !_rules[rulenegative]() {
									goto l140
								}
								goto l139
							l140:
								position, tokenIndex = position139, tokenIndex139
								{
									position141 := position
									if buffer[position] != rune('+') {
										goto l137
									}
									position++
									add(rulepositive, position141)
								}
							}
						l139:
							goto l138
						l137:
							position, tokenIndex = position137, tokenIndex137
						}
					l138:
					l142:
						{
							position143, tokenIndex143 := position, tokenIndex
							if !_rules[rulenumber]() {
								goto l143
							}
							goto l142
						l143:
							position, tokenIndex = position143, tokenIndex143
						}
						goto l134
					l133:
						position, tokenIndex = position133, tokenIndex133
					}
				l134:
					goto l131
				l130:
					position, tokenIndex = position130, tokenIndex130
				}
			l131:
				add(rulevalue, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 12 ws <- <' '> */
		func() bool {
			position144, tokenIndex144 := position, tokenIndex
			{
				position145 := position
				if buffer[position] != rune(' ') {
					goto l144
				}
				position++
				add(rulews, position145)
			}
			return true
		l144:
			position, tokenIndex = position144, tokenIndex144
			return false
		},
		/* 13 comma <- <','> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				if buffer[position] != rune(',') {
					goto l146
				}
				position++
				add(rulecomma, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 14 lf <- <'\n'> */
		func() bool {
			position148, tokenIndex148 := position, tokenIndex
			{
				position149 := position
				if buffer[position] != rune('\n') {
					goto l148
				}
				position++
				add(rulelf, position149)
			}
			return true
		l148:
			position, tokenIndex = position148, tokenIndex148
			return false
		},
		/* 15 cr <- <'\r'> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				if buffer[position] != rune('\r') {
					goto l150
				}
				position++
				add(rulecr, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 16 escdquote <- <'"'> */
		func() bool {
			position152, tokenIndex152 := position, tokenIndex
			{
				position153 := position
				if buffer[position] != rune('"') {
					goto l152
				}
				position++
				add(ruleescdquote, position153)
			}
			return true
		l152:
			position, tokenIndex = position152, tokenIndex152
			return false
		},
		/* 17 escsquote <- <('\\' '\'')> */
		nil,
		/* 18 squote <- <'\''> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if buffer[position] != rune('\'') {
					goto l155
				}
				position++
				add(rulesquote, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 19 obracket <- <'['> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				if buffer[position] != rune('[') {
					goto l157
				}
				position++
				add(ruleobracket, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 20 cbracket <- <']'> */
		func() bool {
			position159, tokenIndex159 := position, tokenIndex
			{
				position160 := position
				if buffer[position] != rune(']') {
					goto l159
				}
				position++
				add(rulecbracket, position160)
			}
			return true
		l159:
			position, tokenIndex = position159, tokenIndex159
			return false
		},
		/* 21 oparen <- <'('> */
		func() bool {
			position161, tokenIndex161 := position, tokenIndex
			{
				position162 := position
				if buffer[position] != rune('(') {
					goto l161
				}
				position++
				add(ruleoparen, position162)
			}
			return true
		l161:
			position, tokenIndex = position161, tokenIndex161
			return false
		},
		/* 22 cparen <- <')'> */
		func() bool {
			position163, tokenIndex163 := position, tokenIndex
			{
				position164 := position
				if buffer[position] != rune(')') {
					goto l163
				}
				position++
				add(rulecparen, position164)
			}
			return true
		l163:
			position, tokenIndex = position163, tokenIndex163
			return false
		},
		/* 23 number <- <([a-z] / [A-Z] / [0-9])> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				{
					position167, tokenIndex167 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l168
					}
					position++
					goto l167
				l168:
					position, tokenIndex = position167, tokenIndex167
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l169
					}
					position++
					goto l167
				l169:
					position, tokenIndex = position167, tokenIndex167
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l165
					}
					position++
				}
			l167:
				add(rulenumber, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 24 negative <- <'-'> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				if buffer[position] != rune('-') {
					goto l170
				}
				position++
				add(rulenegative, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 25 positive <- <'+'> */
		nil,
		/* 26 decimal_point <- <'.'> */
		nil,
		/* 27 textdata <- <([a-z] / [A-Z] / [0-9] / ' ' / '!' / '#' / '$' / '&' / '%' / '*' / '+' / '-' / '.' / '/' / ':' / ';' / [<->] / '?' / '\\' / '^' / '_' / '`' / '{' / '|' / '}' / '~')> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				{
					position176, tokenIndex176 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l177
					}
					position++
					goto l176
				l177:
					position, tokenIndex = position176, tokenIndex176
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l178
					}
					position++
					goto l176
				l178:
					position, tokenIndex = position176, tokenIndex176
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l179
					}
					position++
					goto l176
				l179:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune(' ') {
						goto l180
					}
					position++
					goto l176
				l180:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('!') {
						goto l181
					}
					position++
					goto l176
				l181:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('#') {
						goto l182
					}
					position++
					goto l176
				l182:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('$') {
						goto l183
					}
					position++
					goto l176
				l183:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('&') {
						goto l184
					}
					position++
					goto l176
				l184:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('%') {
						goto l185
					}
					position++
					goto l176
				l185:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('*') {
						goto l186
					}
					position++
					goto l176
				l186:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('+') {
						goto l187
					}
					position++
					goto l176
				l187:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('-') {
						goto l188
					}
					position++
					goto l176
				l188:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('.') {
						goto l189
					}
					position++
					goto l176
				l189:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('/') {
						goto l190
					}
					position++
					goto l176
				l190:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune(':') {
						goto l191
					}
					position++
					goto l176
				l191:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune(';') {
						goto l192
					}
					position++
					goto l176
				l192:
					position, tokenIndex = position176, tokenIndex176
					if c := buffer[position]; c < rune('<') || c > rune('>') {
						goto l193
					}
					position++
					goto l176
				l193:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('?') {
						goto l194
					}
					position++
					goto l176
				l194:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('\\') {
						goto l195
					}
					position++
					goto l176
				l195:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('^') {
						goto l196
					}
					position++
					goto l176
				l196:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('_') {
						goto l197
					}
					position++
					goto l176
				l197:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('`') {
						goto l198
					}
					position++
					goto l176
				l198:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('{') {
						goto l199
					}
					position++
					goto l176
				l199:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('|') {
						goto l200
					}
					position++
					goto l176
				l200:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('}') {
						goto l201
					}
					position++
					goto l176
				l201:
					position, tokenIndex = position176, tokenIndex176
					if buffer[position] != rune('~') {
						goto l174
					}
					position++
				}
			l176:
				add(ruletextdata, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 29 Action0 <- <{ p.pushArray() }> */
		nil,
		/* 30 Action1 <- <{ p.popArray() }> */
		nil,
		/* 31 Action2 <- <{ p.pushArray() }> */
		nil,
		/* 32 Action3 <- <{ p.popArray() }> */
		nil,
		/* 33 Action4 <- <{ p.pushArray() }> */
		nil,
		/* 34 Action5 <- <{ p.popArray() }> */
		nil,
		nil,
		/* 36 Action6 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
		/* 37 Action7 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
		/* 38 Action8 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
		/* 39 Action9 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
