package result

// Code generated by peg -inline ./primitive/compute/result/complex_field.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleComplexField
	rulearray
	rulearray_contents
	ruletuple_contents
	ruleitem
	rulestring
	ruledquote_string
	rulesquote_string
	rulevalue
	rulesep
	rulews
	rulecomma
	rulelf
	rulecr
	ruleescdquote
	ruleescsquote
	rulesquote
	ruleobracket
	rulecbracket
	ruleoparen
	rulecparen
	rulenumber
	rulenegative
	rulepositive
	ruledecimal_point
	ruletextdata
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	rulePegText
	ruleAction4
	ruleAction5
	ruleAction6
)

var rul3s = [...]string{
	"Unknown",
	"ComplexField",
	"array",
	"array_contents",
	"tuple_contents",
	"item",
	"string",
	"dquote_string",
	"squote_string",
	"value",
	"sep",
	"ws",
	"comma",
	"lf",
	"cr",
	"escdquote",
	"escsquote",
	"squote",
	"obracket",
	"cbracket",
	"oparen",
	"cparen",
	"number",
	"negative",
	"positive",
	"decimal_point",
	"textdata",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"PegText",
	"Action4",
	"Action5",
	"Action6",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[34m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type ComplexField struct {
	arrayElements

	Buffer string
	buffer []rune
	rules  [35]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *ComplexField) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *ComplexField) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *ComplexField
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *ComplexField) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *ComplexField) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *ComplexField) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.pushArray()
		case ruleAction1:
			p.popArray()
		case ruleAction2:
			p.pushArray()
		case ruleAction3:
			p.popArray()
		case ruleAction4:
			p.addElement(buffer[begin:end])
		case ruleAction5:
			p.addElement(buffer[begin:end])
		case ruleAction6:
			p.addElement(buffer[begin:end])

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*ComplexField) error {
	return func(p *ComplexField) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*ComplexField) error {
	return func(p *ComplexField) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *ComplexField) Init(options ...func(*ComplexField) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 ComplexField <- <(array !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulearray]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					if !matchDot() {
						goto l2
					}
					goto l0
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
				add(ruleComplexField, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 array <- <((ws* obracket Action0 ws* array_contents ws* cbracket Action1) / (ws* oparen Action2 ws* tuple_contents ws* cparen Action3))> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				{
					position5, tokenIndex5 := position, tokenIndex
				l7:
					{
						position8, tokenIndex8 := position, tokenIndex
						if !_rules[rulews]() {
							goto l8
						}
						goto l7
					l8:
						position, tokenIndex = position8, tokenIndex8
					}
					if !_rules[ruleobracket]() {
						goto l6
					}
					{
						add(ruleAction0, position)
					}
				l10:
					{
						position11, tokenIndex11 := position, tokenIndex
						if !_rules[rulews]() {
							goto l11
						}
						goto l10
					l11:
						position, tokenIndex = position11, tokenIndex11
					}
					{
						position12 := position
					l13:
						{
							position14, tokenIndex14 := position, tokenIndex
							if !_rules[ruleitem]() {
								goto l14
							}
							{
								position15 := position
								{
									position16, tokenIndex16 := position, tokenIndex
									if !_rules[rulews]() {
										goto l17
									}
								l18:
									{
										position19, tokenIndex19 := position, tokenIndex
										if !_rules[rulews]() {
											goto l19
										}
										goto l18
									l19:
										position, tokenIndex = position19, tokenIndex19
									}
									{
										position20, tokenIndex20 := position, tokenIndex
										if !_rules[rulecomma]() {
											goto l20
										}
										goto l21
									l20:
										position, tokenIndex = position20, tokenIndex20
									}
								l21:
								l22:
									{
										position23, tokenIndex23 := position, tokenIndex
										if !_rules[rulews]() {
											goto l23
										}
										goto l22
									l23:
										position, tokenIndex = position23, tokenIndex23
									}
									goto l16
								l17:
									position, tokenIndex = position16, tokenIndex16
								l25:
									{
										position26, tokenIndex26 := position, tokenIndex
										if !_rules[rulews]() {
											goto l26
										}
										goto l25
									l26:
										position, tokenIndex = position26, tokenIndex26
									}
									if !_rules[rulecomma]() {
										goto l24
									}
								l27:
									{
										position28, tokenIndex28 := position, tokenIndex
										if !_rules[rulews]() {
											goto l28
										}
										goto l27
									l28:
										position, tokenIndex = position28, tokenIndex28
									}
									goto l16
								l24:
									position, tokenIndex = position16, tokenIndex16
									if !_rules[rulelf]() {
										goto l14
									}
								}
							l16:
								add(rulesep, position15)
							}
							goto l13
						l14:
							position, tokenIndex = position14, tokenIndex14
						}
						if !_rules[ruleitem]() {
							goto l6
						}
					l29:
						{
							position30, tokenIndex30 := position, tokenIndex
							if !_rules[rulews]() {
								goto l30
							}
							goto l29
						l30:
							position, tokenIndex = position30, tokenIndex30
						}
						add(rulearray_contents, position12)
					}
				l31:
					{
						position32, tokenIndex32 := position, tokenIndex
						if !_rules[rulews]() {
							goto l32
						}
						goto l31
					l32:
						position, tokenIndex = position32, tokenIndex32
					}
					if !_rules[rulecbracket]() {
						goto l6
					}
					{
						add(ruleAction1, position)
					}
					goto l5
				l6:
					position, tokenIndex = position5, tokenIndex5
				l34:
					{
						position35, tokenIndex35 := position, tokenIndex
						if !_rules[rulews]() {
							goto l35
						}
						goto l34
					l35:
						position, tokenIndex = position35, tokenIndex35
					}
					if !_rules[ruleoparen]() {
						goto l3
					}
					{
						add(ruleAction2, position)
					}
				l37:
					{
						position38, tokenIndex38 := position, tokenIndex
						if !_rules[rulews]() {
							goto l38
						}
						goto l37
					l38:
						position, tokenIndex = position38, tokenIndex38
					}
					{
						position39 := position
						if !_rules[ruleitem]() {
							goto l3
						}
					l42:
						{
							position43, tokenIndex43 := position, tokenIndex
							if !_rules[rulews]() {
								goto l43
							}
							goto l42
						l43:
							position, tokenIndex = position43, tokenIndex43
						}
						if !_rules[rulecomma]() {
							goto l3
						}
					l44:
						{
							position45, tokenIndex45 := position, tokenIndex
							if !_rules[rulews]() {
								goto l45
							}
							goto l44
						l45:
							position, tokenIndex = position45, tokenIndex45
						}
					l40:
						{
							position41, tokenIndex41 := position, tokenIndex
							if !_rules[ruleitem]() {
								goto l41
							}
						l46:
							{
								position47, tokenIndex47 := position, tokenIndex
								if !_rules[rulews]() {
									goto l47
								}
								goto l46
							l47:
								position, tokenIndex = position47, tokenIndex47
							}
							if !_rules[rulecomma]() {
								goto l41
							}
						l48:
							{
								position49, tokenIndex49 := position, tokenIndex
								if !_rules[rulews]() {
									goto l49
								}
								goto l48
							l49:
								position, tokenIndex = position49, tokenIndex49
							}
							goto l40
						l41:
							position, tokenIndex = position41, tokenIndex41
						}
						{
							position50, tokenIndex50 := position, tokenIndex
						l52:
							{
								position53, tokenIndex53 := position, tokenIndex
								if !_rules[rulews]() {
									goto l53
								}
								goto l52
							l53:
								position, tokenIndex = position53, tokenIndex53
							}
							if !_rules[ruleitem]() {
								goto l50
							}
						l54:
							{
								position55, tokenIndex55 := position, tokenIndex
								if !_rules[rulews]() {
									goto l55
								}
								goto l54
							l55:
								position, tokenIndex = position55, tokenIndex55
							}
							goto l51
						l50:
							position, tokenIndex = position50, tokenIndex50
						}
					l51:
						add(ruletuple_contents, position39)
					}
				l56:
					{
						position57, tokenIndex57 := position, tokenIndex
						if !_rules[rulews]() {
							goto l57
						}
						goto l56
					l57:
						position, tokenIndex = position57, tokenIndex57
					}
					if !_rules[rulecparen]() {
						goto l3
					}
					{
						add(ruleAction3, position)
					}
				}
			l5:
				add(rulearray, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 array_contents <- <((item sep)* item ws*)> */
		nil,
		/* 3 tuple_contents <- <((item ws* comma ws*)+ (ws* item ws*)?)> */
		nil,
		/* 4 item <- <(array / string / (<value> Action4))> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
				{
					position63, tokenIndex63 := position, tokenIndex
					if !_rules[rulearray]() {
						goto l64
					}
					goto l63
				l64:
					position, tokenIndex = position63, tokenIndex63
					{
						position66 := position
						{
							position67, tokenIndex67 := position, tokenIndex
							{
								position69 := position
								if !_rules[ruleescdquote]() {
									goto l68
								}
								{
									position70 := position
								l71:
									{
										position72, tokenIndex72 := position, tokenIndex
										{
											position73, tokenIndex73 := position, tokenIndex
											if !_rules[ruletextdata]() {
												goto l74
											}
											goto l73
										l74:
											position, tokenIndex = position73, tokenIndex73
											if !_rules[rulesquote]() {
												goto l75
											}
											goto l73
										l75:
											position, tokenIndex = position73, tokenIndex73
											if !_rules[rulelf]() {
												goto l76
											}
											goto l73
										l76:
											position, tokenIndex = position73, tokenIndex73
											if !_rules[rulecr]() {
												goto l77
											}
											goto l73
										l77:
											position, tokenIndex = position73, tokenIndex73
											if !_rules[ruleobracket]() {
												goto l78
											}
											goto l73
										l78:
											position, tokenIndex = position73, tokenIndex73
											if !_rules[rulecbracket]() {
												goto l79
											}
											goto l73
										l79:
											position, tokenIndex = position73, tokenIndex73
											if !_rules[ruleoparen]() {
												goto l80
											}
											goto l73
										l80:
											position, tokenIndex = position73, tokenIndex73
											if !_rules[rulecparen]() {
												goto l81
											}
											goto l73
										l81:
											position, tokenIndex = position73, tokenIndex73
											if !_rules[rulecomma]() {
												goto l72
											}
										}
									l73:
										goto l71
									l72:
										position, tokenIndex = position72, tokenIndex72
									}
									add(rulePegText, position70)
								}
								if !_rules[ruleescdquote]() {
									goto l68
								}
								{
									add(ruleAction5, position)
								}
								add(ruledquote_string, position69)
							}
							goto l67
						l68:
							position, tokenIndex = position67, tokenIndex67
							{
								position83 := position
								if !_rules[rulesquote]() {
									goto l65
								}
								{
									position84 := position
								l85:
									{
										position86, tokenIndex86 := position, tokenIndex
										{
											position87, tokenIndex87 := position, tokenIndex
											{
												position89 := position
												if buffer[position] != rune('\\') {
													goto l88
												}
												position++
												if buffer[position] != rune('\'') {
													goto l88
												}
												position++
												add(ruleescsquote, position89)
											}
											goto l87
										l88:
											position, tokenIndex = position87, tokenIndex87
											if !_rules[ruleescdquote]() {
												goto l90
											}
											goto l87
										l90:
											position, tokenIndex = position87, tokenIndex87
											if !_rules[ruletextdata]() {
												goto l91
											}
											goto l87
										l91:
											position, tokenIndex = position87, tokenIndex87
											if !_rules[rulelf]() {
												goto l92
											}
											goto l87
										l92:
											position, tokenIndex = position87, tokenIndex87
											if !_rules[rulecr]() {
												goto l93
											}
											goto l87
										l93:
											position, tokenIndex = position87, tokenIndex87
											if !_rules[ruleobracket]() {
												goto l94
											}
											goto l87
										l94:
											position, tokenIndex = position87, tokenIndex87
											if !_rules[rulecbracket]() {
												goto l95
											}
											goto l87
										l95:
											position, tokenIndex = position87, tokenIndex87
											if !_rules[ruleoparen]() {
												goto l96
											}
											goto l87
										l96:
											position, tokenIndex = position87, tokenIndex87
											if !_rules[rulecparen]() {
												goto l86
											}
										}
									l87:
										goto l85
									l86:
										position, tokenIndex = position86, tokenIndex86
									}
									add(rulePegText, position84)
								}
								if !_rules[rulesquote]() {
									goto l65
								}
								{
									add(ruleAction6, position)
								}
								add(rulesquote_string, position83)
							}
						}
					l67:
						add(rulestring, position66)
					}
					goto l63
				l65:
					position, tokenIndex = position63, tokenIndex63
					{
						position98 := position
						{
							position99 := position
							{
								position100, tokenIndex100 := position, tokenIndex
								if !_rules[rulenegative]() {
									goto l100
								}
								goto l101
							l100:
								position, tokenIndex = position100, tokenIndex100
							}
						l101:
							if !_rules[rulenumber]() {
								goto l61
							}
						l102:
							{
								position103, tokenIndex103 := position, tokenIndex
								if !_rules[rulenumber]() {
									goto l103
								}
								goto l102
							l103:
								position, tokenIndex = position103, tokenIndex103
							}
							{
								position104, tokenIndex104 := position, tokenIndex
								{
									position106 := position
									if buffer[position] != rune('.') {
										goto l104
									}
									position++
									add(ruledecimal_point, position106)
								}
								{
									position107, tokenIndex107 := position, tokenIndex
									if !_rules[rulenumber]() {
										goto l107
									}
								l109:
									{
										position110, tokenIndex110 := position, tokenIndex
										if !_rules[rulenumber]() {
											goto l110
										}
										goto l109
									l110:
										position, tokenIndex = position110, tokenIndex110
									}
									{
										position111, tokenIndex111 := position, tokenIndex
										{
											position113, tokenIndex113 := position, tokenIndex
											if !_rules[rulenegative]() {
												goto l114
											}
											goto l113
										l114:
											position, tokenIndex = position113, tokenIndex113
											{
												position115 := position
												if buffer[position] != rune('+') {
													goto l111
												}
												position++
												add(rulepositive, position115)
											}
										}
									l113:
										goto l112
									l111:
										position, tokenIndex = position111, tokenIndex111
									}
								l112:
								l116:
									{
										position117, tokenIndex117 := position, tokenIndex
										if !_rules[rulenumber]() {
											goto l117
										}
										goto l116
									l117:
										position, tokenIndex = position117, tokenIndex117
									}
									goto l108
								l107:
									position, tokenIndex = position107, tokenIndex107
								}
							l108:
								goto l105
							l104:
								position, tokenIndex = position104, tokenIndex104
							}
						l105:
							add(rulevalue, position99)
						}
						add(rulePegText, position98)
					}
					{
						add(ruleAction4, position)
					}
				}
			l63:
				add(ruleitem, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 5 string <- <(dquote_string / squote_string)> */
		nil,
		/* 6 dquote_string <- <(escdquote <(textdata / squote / lf / cr / obracket / cbracket / oparen / cparen / comma)*> escdquote Action5)> */
		nil,
		/* 7 squote_string <- <(squote <(escsquote / escdquote / textdata / lf / cr / obracket / cbracket / oparen / cparen)*> squote Action6)> */
		nil,
		/* 8 value <- <(negative? number+ (decimal_point (number+ (negative / positive)? number*)?)?)> */
		nil,
		/* 9 sep <- <((ws+ comma? ws*) / (ws* comma ws*) / lf)> */
		nil,
		/* 10 ws <- <' '> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if buffer[position] != rune(' ') {
					goto l124
				}
				position++
				add(rulews, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 11 comma <- <','> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				if buffer[position] != rune(',') {
					goto l126
				}
				position++
				add(rulecomma, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 12 lf <- <'\n'> */
		func() bool {
			position128, tokenIndex128 := position, tokenIndex
			{
				position129 := position
				if buffer[position] != rune('\n') {
					goto l128
				}
				position++
				add(rulelf, position129)
			}
			return true
		l128:
			position, tokenIndex = position128, tokenIndex128
			return false
		},
		/* 13 cr <- <'\r'> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if buffer[position] != rune('\r') {
					goto l130
				}
				position++
				add(rulecr, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 14 escdquote <- <'"'> */
		func() bool {
			position132, tokenIndex132 := position, tokenIndex
			{
				position133 := position
				if buffer[position] != rune('"') {
					goto l132
				}
				position++
				add(ruleescdquote, position133)
			}
			return true
		l132:
			position, tokenIndex = position132, tokenIndex132
			return false
		},
		/* 15 escsquote <- <('\\' '\'')> */
		nil,
		/* 16 squote <- <'\''> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				if buffer[position] != rune('\'') {
					goto l135
				}
				position++
				add(rulesquote, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 17 obracket <- <'['> */
		func() bool {
			position137, tokenIndex137 := position, tokenIndex
			{
				position138 := position
				if buffer[position] != rune('[') {
					goto l137
				}
				position++
				add(ruleobracket, position138)
			}
			return true
		l137:
			position, tokenIndex = position137, tokenIndex137
			return false
		},
		/* 18 cbracket <- <']'> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				if buffer[position] != rune(']') {
					goto l139
				}
				position++
				add(rulecbracket, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 19 oparen <- <'('> */
		func() bool {
			position141, tokenIndex141 := position, tokenIndex
			{
				position142 := position
				if buffer[position] != rune('(') {
					goto l141
				}
				position++
				add(ruleoparen, position142)
			}
			return true
		l141:
			position, tokenIndex = position141, tokenIndex141
			return false
		},
		/* 20 cparen <- <')'> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if buffer[position] != rune(')') {
					goto l143
				}
				position++
				add(rulecparen, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 21 number <- <([a-z] / [A-Z] / [0-9])> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				{
					position147, tokenIndex147 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l148
					}
					position++
					goto l147
				l148:
					position, tokenIndex = position147, tokenIndex147
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l149
					}
					position++
					goto l147
				l149:
					position, tokenIndex = position147, tokenIndex147
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l145
					}
					position++
				}
			l147:
				add(rulenumber, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 22 negative <- <'-'> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				if buffer[position] != rune('-') {
					goto l150
				}
				position++
				add(rulenegative, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 23 positive <- <'+'> */
		nil,
		/* 24 decimal_point <- <'.'> */
		nil,
		/* 25 textdata <- <([a-z] / [A-Z] / [0-9] / ' ' / '!' / '#' / '$' / '&' / '%' / '*' / '+' / '-' / '.' / '/' / ':' / ';' / [<->] / '?' / '\\' / '^' / '_' / '`' / '{' / '|' / '}' / '~')> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				{
					position156, tokenIndex156 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l157
					}
					position++
					goto l156
				l157:
					position, tokenIndex = position156, tokenIndex156
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l158
					}
					position++
					goto l156
				l158:
					position, tokenIndex = position156, tokenIndex156
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l159
					}
					position++
					goto l156
				l159:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune(' ') {
						goto l160
					}
					position++
					goto l156
				l160:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('!') {
						goto l161
					}
					position++
					goto l156
				l161:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('#') {
						goto l162
					}
					position++
					goto l156
				l162:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('$') {
						goto l163
					}
					position++
					goto l156
				l163:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('&') {
						goto l164
					}
					position++
					goto l156
				l164:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('%') {
						goto l165
					}
					position++
					goto l156
				l165:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('*') {
						goto l166
					}
					position++
					goto l156
				l166:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('+') {
						goto l167
					}
					position++
					goto l156
				l167:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('-') {
						goto l168
					}
					position++
					goto l156
				l168:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('.') {
						goto l169
					}
					position++
					goto l156
				l169:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('/') {
						goto l170
					}
					position++
					goto l156
				l170:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune(':') {
						goto l171
					}
					position++
					goto l156
				l171:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune(';') {
						goto l172
					}
					position++
					goto l156
				l172:
					position, tokenIndex = position156, tokenIndex156
					if c := buffer[position]; c < rune('<') || c > rune('>') {
						goto l173
					}
					position++
					goto l156
				l173:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('?') {
						goto l174
					}
					position++
					goto l156
				l174:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('\\') {
						goto l175
					}
					position++
					goto l156
				l175:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('^') {
						goto l176
					}
					position++
					goto l156
				l176:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('_') {
						goto l177
					}
					position++
					goto l156
				l177:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('`') {
						goto l178
					}
					position++
					goto l156
				l178:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('{') {
						goto l179
					}
					position++
					goto l156
				l179:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('|') {
						goto l180
					}
					position++
					goto l156
				l180:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('}') {
						goto l181
					}
					position++
					goto l156
				l181:
					position, tokenIndex = position156, tokenIndex156
					if buffer[position] != rune('~') {
						goto l154
					}
					position++
				}
			l156:
				add(ruletextdata, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 27 Action0 <- <{ p.pushArray() }> */
		nil,
		/* 28 Action1 <- <{ p.popArray() }> */
		nil,
		/* 29 Action2 <- <{ p.pushArray() }> */
		nil,
		/* 30 Action3 <- <{ p.popArray() }> */
		nil,
		nil,
		/* 32 Action4 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
		/* 33 Action5 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
		/* 34 Action6 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
