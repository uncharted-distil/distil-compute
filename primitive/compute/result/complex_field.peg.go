package result

// Code generated by peg -inline ./primitive/compute/result/complex_field.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleComplexField
	rulearray
	rulearray_contents
	ruletuple_contents
	ruleitem
	rulend_array
	rulend_array_contents
	rulend_item
	rulegc_array
	rulegc_array_contents
	rulegc_item
	rulestring
	ruledquote_string
	rulesquote_string
	rulevalue
	rulews
	rulecomma
	rulelf
	rulecr
	ruleescdquote
	ruleescsquote
	rulesquote
	ruleobracket
	rulecbracket
	ruleoparen
	rulecparen
	rulenumber
	rulenegative
	rulepositive
	ruledecimal_point
	ruletextdata
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	rulePegText
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
)

var rul3s = [...]string{
	"Unknown",
	"ComplexField",
	"array",
	"array_contents",
	"tuple_contents",
	"item",
	"nd_array",
	"nd_array_contents",
	"nd_item",
	"gc_array",
	"gc_array_contents",
	"gc_item",
	"string",
	"dquote_string",
	"squote_string",
	"value",
	"ws",
	"comma",
	"lf",
	"cr",
	"escdquote",
	"escsquote",
	"squote",
	"obracket",
	"cbracket",
	"oparen",
	"cparen",
	"number",
	"negative",
	"positive",
	"decimal_point",
	"textdata",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"PegText",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[34m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type ComplexField struct {
	arrayElements

	Buffer string
	buffer []rune
	rules  [46]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *ComplexField) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *ComplexField) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *ComplexField
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *ComplexField) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *ComplexField) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *ComplexField) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.pushArray()
		case ruleAction1:
			p.popArray()
		case ruleAction2:
			p.pushArray()
		case ruleAction3:
			p.popArray()
		case ruleAction4:
			p.addElement(buffer[begin:end])
		case ruleAction5:
			p.pushArray()
		case ruleAction6:
			p.popArray()
		case ruleAction7:
			p.addElement(buffer[begin:end])
		case ruleAction8:
			p.pushArray()
		case ruleAction9:
			p.popArray()
		case ruleAction10:
			p.addElement(buffer[begin:end])
		case ruleAction11:
			p.addElement(buffer[begin:end])
		case ruleAction12:
			p.addElement(buffer[begin:end])

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*ComplexField) error {
	return func(p *ComplexField) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*ComplexField) error {
	return func(p *ComplexField) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *ComplexField) Init(options ...func(*ComplexField) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 ComplexField <- <((array / nd_array / gc_array) !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rulearray]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[rulend_array]() {
						goto l4
					}
					goto l2
				l4:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[rulegc_array]() {
						goto l0
					}
				}
			l2:
				{
					position5, tokenIndex5 := position, tokenIndex
					if !matchDot() {
						goto l5
					}
					goto l0
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				add(ruleComplexField, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 array <- <((ws* obracket Action0 ws* array_contents ws* cbracket Action1) / (ws* oparen Action2 ws* tuple_contents ws* cparen Action3))> */
		func() bool {
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
				{
					position8, tokenIndex8 := position, tokenIndex
				l10:
					{
						position11, tokenIndex11 := position, tokenIndex
						if !_rules[rulews]() {
							goto l11
						}
						goto l10
					l11:
						position, tokenIndex = position11, tokenIndex11
					}
					if !_rules[ruleobracket]() {
						goto l9
					}
					{
						add(ruleAction0, position)
					}
				l13:
					{
						position14, tokenIndex14 := position, tokenIndex
						if !_rules[rulews]() {
							goto l14
						}
						goto l13
					l14:
						position, tokenIndex = position14, tokenIndex14
					}
					{
						position15 := position
					l16:
						{
							position17, tokenIndex17 := position, tokenIndex
							if !_rules[ruleitem]() {
								goto l17
							}
						l18:
							{
								position19, tokenIndex19 := position, tokenIndex
								if !_rules[rulews]() {
									goto l19
								}
								goto l18
							l19:
								position, tokenIndex = position19, tokenIndex19
							}
							if !_rules[rulecomma]() {
								goto l17
							}
						l20:
							{
								position21, tokenIndex21 := position, tokenIndex
								if !_rules[rulews]() {
									goto l21
								}
								goto l20
							l21:
								position, tokenIndex = position21, tokenIndex21
							}
							goto l16
						l17:
							position, tokenIndex = position17, tokenIndex17
						}
						if !_rules[ruleitem]() {
							goto l9
						}
					l22:
						{
							position23, tokenIndex23 := position, tokenIndex
							if !_rules[rulews]() {
								goto l23
							}
							goto l22
						l23:
							position, tokenIndex = position23, tokenIndex23
						}
						add(rulearray_contents, position15)
					}
				l24:
					{
						position25, tokenIndex25 := position, tokenIndex
						if !_rules[rulews]() {
							goto l25
						}
						goto l24
					l25:
						position, tokenIndex = position25, tokenIndex25
					}
					if !_rules[rulecbracket]() {
						goto l9
					}
					{
						add(ruleAction1, position)
					}
					goto l8
				l9:
					position, tokenIndex = position8, tokenIndex8
				l27:
					{
						position28, tokenIndex28 := position, tokenIndex
						if !_rules[rulews]() {
							goto l28
						}
						goto l27
					l28:
						position, tokenIndex = position28, tokenIndex28
					}
					if !_rules[ruleoparen]() {
						goto l6
					}
					{
						add(ruleAction2, position)
					}
				l30:
					{
						position31, tokenIndex31 := position, tokenIndex
						if !_rules[rulews]() {
							goto l31
						}
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					{
						position32 := position
						if !_rules[ruleitem]() {
							goto l6
						}
					l35:
						{
							position36, tokenIndex36 := position, tokenIndex
							if !_rules[rulews]() {
								goto l36
							}
							goto l35
						l36:
							position, tokenIndex = position36, tokenIndex36
						}
						if !_rules[rulecomma]() {
							goto l6
						}
					l37:
						{
							position38, tokenIndex38 := position, tokenIndex
							if !_rules[rulews]() {
								goto l38
							}
							goto l37
						l38:
							position, tokenIndex = position38, tokenIndex38
						}
					l33:
						{
							position34, tokenIndex34 := position, tokenIndex
							if !_rules[ruleitem]() {
								goto l34
							}
						l39:
							{
								position40, tokenIndex40 := position, tokenIndex
								if !_rules[rulews]() {
									goto l40
								}
								goto l39
							l40:
								position, tokenIndex = position40, tokenIndex40
							}
							if !_rules[rulecomma]() {
								goto l34
							}
						l41:
							{
								position42, tokenIndex42 := position, tokenIndex
								if !_rules[rulews]() {
									goto l42
								}
								goto l41
							l42:
								position, tokenIndex = position42, tokenIndex42
							}
							goto l33
						l34:
							position, tokenIndex = position34, tokenIndex34
						}
						{
							position43, tokenIndex43 := position, tokenIndex
						l45:
							{
								position46, tokenIndex46 := position, tokenIndex
								if !_rules[rulews]() {
									goto l46
								}
								goto l45
							l46:
								position, tokenIndex = position46, tokenIndex46
							}
							if !_rules[ruleitem]() {
								goto l43
							}
						l47:
							{
								position48, tokenIndex48 := position, tokenIndex
								if !_rules[rulews]() {
									goto l48
								}
								goto l47
							l48:
								position, tokenIndex = position48, tokenIndex48
							}
							goto l44
						l43:
							position, tokenIndex = position43, tokenIndex43
						}
					l44:
						add(ruletuple_contents, position32)
					}
				l49:
					{
						position50, tokenIndex50 := position, tokenIndex
						if !_rules[rulews]() {
							goto l50
						}
						goto l49
					l50:
						position, tokenIndex = position50, tokenIndex50
					}
					if !_rules[rulecparen]() {
						goto l6
					}
					{
						add(ruleAction3, position)
					}
				}
			l8:
				add(rulearray, position7)
			}
			return true
		l6:
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 2 array_contents <- <((item ws* comma ws*)* item ws*)> */
		nil,
		/* 3 tuple_contents <- <((item ws* comma ws*)+ (ws* item ws*)?)> */
		nil,
		/* 4 item <- <(array / string / (<value> Action4))> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				{
					position56, tokenIndex56 := position, tokenIndex
					if !_rules[rulearray]() {
						goto l57
					}
					goto l56
				l57:
					position, tokenIndex = position56, tokenIndex56
					if !_rules[rulestring]() {
						goto l58
					}
					goto l56
				l58:
					position, tokenIndex = position56, tokenIndex56
					{
						position59 := position
						if !_rules[rulevalue]() {
							goto l54
						}
						add(rulePegText, position59)
					}
					{
						add(ruleAction4, position)
					}
				}
			l56:
				add(ruleitem, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 5 nd_array <- <(ws* obracket Action5 ws* nd_array_contents ws* cbracket Action6)> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
			l63:
				{
					position64, tokenIndex64 := position, tokenIndex
					if !_rules[rulews]() {
						goto l64
					}
					goto l63
				l64:
					position, tokenIndex = position64, tokenIndex64
				}
				if !_rules[ruleobracket]() {
					goto l61
				}
				{
					add(ruleAction5, position)
				}
			l66:
				{
					position67, tokenIndex67 := position, tokenIndex
					if !_rules[rulews]() {
						goto l67
					}
					goto l66
				l67:
					position, tokenIndex = position67, tokenIndex67
				}
				{
					position68 := position
				l69:
					{
						position70, tokenIndex70 := position, tokenIndex
						if !_rules[rulend_item]() {
							goto l70
						}
						{
							position71, tokenIndex71 := position, tokenIndex
							if !_rules[rulews]() {
								goto l72
							}
							goto l71
						l72:
							position, tokenIndex = position71, tokenIndex71
							if !_rules[rulelf]() {
								goto l70
							}
							{
								position73, tokenIndex73 := position, tokenIndex
								if !_rules[rulews]() {
									goto l73
								}
								goto l74
							l73:
								position, tokenIndex = position73, tokenIndex73
							}
						l74:
						}
					l71:
						goto l69
					l70:
						position, tokenIndex = position70, tokenIndex70
					}
					{
						position75, tokenIndex75 := position, tokenIndex
						if !_rules[rulend_item]() {
							goto l75
						}
					l77:
						{
							position78, tokenIndex78 := position, tokenIndex
							if !_rules[rulews]() {
								goto l78
							}
							goto l77
						l78:
							position, tokenIndex = position78, tokenIndex78
						}
						goto l76
					l75:
						position, tokenIndex = position75, tokenIndex75
					}
				l76:
					add(rulend_array_contents, position68)
				}
			l79:
				{
					position80, tokenIndex80 := position, tokenIndex
					if !_rules[rulews]() {
						goto l80
					}
					goto l79
				l80:
					position, tokenIndex = position80, tokenIndex80
				}
				if !_rules[rulecbracket]() {
					goto l61
				}
				{
					add(ruleAction6, position)
				}
				add(rulend_array, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 6 nd_array_contents <- <((nd_item (ws / (lf ws?)))* (nd_item ws*)?)> */
		nil,
		/* 7 nd_item <- <(nd_array / string / (<value> Action7))> */
		func() bool {
			position83, tokenIndex83 := position, tokenIndex
			{
				position84 := position
				{
					position85, tokenIndex85 := position, tokenIndex
					if !_rules[rulend_array]() {
						goto l86
					}
					goto l85
				l86:
					position, tokenIndex = position85, tokenIndex85
					if !_rules[rulestring]() {
						goto l87
					}
					goto l85
				l87:
					position, tokenIndex = position85, tokenIndex85
					{
						position88 := position
						if !_rules[rulevalue]() {
							goto l83
						}
						add(rulePegText, position88)
					}
					{
						add(ruleAction7, position)
					}
				}
			l85:
				add(rulend_item, position84)
			}
			return true
		l83:
			position, tokenIndex = position83, tokenIndex83
			return false
		},
		/* 8 gc_array <- <(ws* obracket Action8 ws* gc_array_contents ws* cbracket Action9)> */
		func() bool {
			position90, tokenIndex90 := position, tokenIndex
			{
				position91 := position
			l92:
				{
					position93, tokenIndex93 := position, tokenIndex
					if !_rules[rulews]() {
						goto l93
					}
					goto l92
				l93:
					position, tokenIndex = position93, tokenIndex93
				}
				if !_rules[ruleobracket]() {
					goto l90
				}
				{
					add(ruleAction8, position)
				}
			l95:
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[rulews]() {
						goto l96
					}
					goto l95
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
				{
					position97 := position
				l98:
					{
						position99, tokenIndex99 := position, tokenIndex
						if !_rules[rulegc_item]() {
							goto l99
						}
						{
							position100, tokenIndex100 := position, tokenIndex
							if !_rules[rulecomma]() {
								goto l101
							}
							goto l100
						l101:
							position, tokenIndex = position100, tokenIndex100
							if !_rules[rulelf]() {
								goto l99
							}
						}
					l100:
					l102:
						{
							position103, tokenIndex103 := position, tokenIndex
							if !_rules[rulews]() {
								goto l103
							}
							goto l102
						l103:
							position, tokenIndex = position103, tokenIndex103
						}
						goto l98
					l99:
						position, tokenIndex = position99, tokenIndex99
					}
					{
						position104, tokenIndex104 := position, tokenIndex
						if !_rules[rulegc_item]() {
							goto l104
						}
					l106:
						{
							position107, tokenIndex107 := position, tokenIndex
							if !_rules[rulews]() {
								goto l107
							}
							goto l106
						l107:
							position, tokenIndex = position107, tokenIndex107
						}
						goto l105
					l104:
						position, tokenIndex = position104, tokenIndex104
					}
				l105:
					add(rulegc_array_contents, position97)
				}
			l108:
				{
					position109, tokenIndex109 := position, tokenIndex
					if !_rules[rulews]() {
						goto l109
					}
					goto l108
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
				if !_rules[rulecbracket]() {
					goto l90
				}
				{
					add(ruleAction9, position)
				}
				add(rulegc_array, position91)
			}
			return true
		l90:
			position, tokenIndex = position90, tokenIndex90
			return false
		},
		/* 9 gc_array_contents <- <((gc_item (comma / lf) ws*)* (gc_item ws*)?)> */
		nil,
		/* 10 gc_item <- <(gc_array / string / (<value> Action10))> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				{
					position114, tokenIndex114 := position, tokenIndex
					if !_rules[rulegc_array]() {
						goto l115
					}
					goto l114
				l115:
					position, tokenIndex = position114, tokenIndex114
					if !_rules[rulestring]() {
						goto l116
					}
					goto l114
				l116:
					position, tokenIndex = position114, tokenIndex114
					{
						position117 := position
						if !_rules[rulevalue]() {
							goto l112
						}
						add(rulePegText, position117)
					}
					{
						add(ruleAction10, position)
					}
				}
			l114:
				add(rulegc_item, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 11 string <- <(dquote_string / squote_string)> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				{
					position121, tokenIndex121 := position, tokenIndex
					{
						position123 := position
						if !_rules[ruleescdquote]() {
							goto l122
						}
						{
							position124 := position
						l125:
							{
								position126, tokenIndex126 := position, tokenIndex
								{
									position127, tokenIndex127 := position, tokenIndex
									if !_rules[ruletextdata]() {
										goto l128
									}
									goto l127
								l128:
									position, tokenIndex = position127, tokenIndex127
									if !_rules[rulesquote]() {
										goto l129
									}
									goto l127
								l129:
									position, tokenIndex = position127, tokenIndex127
									if !_rules[rulelf]() {
										goto l130
									}
									goto l127
								l130:
									position, tokenIndex = position127, tokenIndex127
									if !_rules[rulecr]() {
										goto l131
									}
									goto l127
								l131:
									position, tokenIndex = position127, tokenIndex127
									if !_rules[ruleobracket]() {
										goto l132
									}
									goto l127
								l132:
									position, tokenIndex = position127, tokenIndex127
									if !_rules[rulecbracket]() {
										goto l133
									}
									goto l127
								l133:
									position, tokenIndex = position127, tokenIndex127
									if !_rules[ruleoparen]() {
										goto l134
									}
									goto l127
								l134:
									position, tokenIndex = position127, tokenIndex127
									if !_rules[rulecparen]() {
										goto l135
									}
									goto l127
								l135:
									position, tokenIndex = position127, tokenIndex127
									if !_rules[rulecomma]() {
										goto l126
									}
								}
							l127:
								goto l125
							l126:
								position, tokenIndex = position126, tokenIndex126
							}
							add(rulePegText, position124)
						}
						if !_rules[ruleescdquote]() {
							goto l122
						}
						{
							add(ruleAction11, position)
						}
						add(ruledquote_string, position123)
					}
					goto l121
				l122:
					position, tokenIndex = position121, tokenIndex121
					{
						position137 := position
						if !_rules[rulesquote]() {
							goto l119
						}
						{
							position138 := position
						l139:
							{
								position140, tokenIndex140 := position, tokenIndex
								{
									position141, tokenIndex141 := position, tokenIndex
									{
										position143 := position
										if buffer[position] != rune('\\') {
											goto l142
										}
										position++
										if buffer[position] != rune('\'') {
											goto l142
										}
										position++
										add(ruleescsquote, position143)
									}
									goto l141
								l142:
									position, tokenIndex = position141, tokenIndex141
									if !_rules[ruleescdquote]() {
										goto l144
									}
									goto l141
								l144:
									position, tokenIndex = position141, tokenIndex141
									if !_rules[ruletextdata]() {
										goto l145
									}
									goto l141
								l145:
									position, tokenIndex = position141, tokenIndex141
									if !_rules[rulelf]() {
										goto l146
									}
									goto l141
								l146:
									position, tokenIndex = position141, tokenIndex141
									if !_rules[rulecr]() {
										goto l147
									}
									goto l141
								l147:
									position, tokenIndex = position141, tokenIndex141
									if !_rules[ruleobracket]() {
										goto l148
									}
									goto l141
								l148:
									position, tokenIndex = position141, tokenIndex141
									if !_rules[rulecbracket]() {
										goto l149
									}
									goto l141
								l149:
									position, tokenIndex = position141, tokenIndex141
									if !_rules[ruleoparen]() {
										goto l150
									}
									goto l141
								l150:
									position, tokenIndex = position141, tokenIndex141
									if !_rules[rulecparen]() {
										goto l140
									}
								}
							l141:
								goto l139
							l140:
								position, tokenIndex = position140, tokenIndex140
							}
							add(rulePegText, position138)
						}
						if !_rules[rulesquote]() {
							goto l119
						}
						{
							add(ruleAction12, position)
						}
						add(rulesquote_string, position137)
					}
				}
			l121:
				add(rulestring, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 12 dquote_string <- <(escdquote <(textdata / squote / lf / cr / obracket / cbracket / oparen / cparen / comma)*> escdquote Action11)> */
		nil,
		/* 13 squote_string <- <(squote <(escsquote / escdquote / textdata / lf / cr / obracket / cbracket / oparen / cparen)*> squote Action12)> */
		nil,
		/* 14 value <- <(negative? number+ (decimal_point (number+ (negative / positive)? number*)?)?)> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				{
					position156, tokenIndex156 := position, tokenIndex
					if !_rules[rulenegative]() {
						goto l156
					}
					goto l157
				l156:
					position, tokenIndex = position156, tokenIndex156
				}
			l157:
				if !_rules[rulenumber]() {
					goto l154
				}
			l158:
				{
					position159, tokenIndex159 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l159
					}
					goto l158
				l159:
					position, tokenIndex = position159, tokenIndex159
				}
				{
					position160, tokenIndex160 := position, tokenIndex
					{
						position162 := position
						if buffer[position] != rune('.') {
							goto l160
						}
						position++
						add(ruledecimal_point, position162)
					}
					{
						position163, tokenIndex163 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l163
						}
					l165:
						{
							position166, tokenIndex166 := position, tokenIndex
							if !_rules[rulenumber]() {
								goto l166
							}
							goto l165
						l166:
							position, tokenIndex = position166, tokenIndex166
						}
						{
							position167, tokenIndex167 := position, tokenIndex
							{
								position169, tokenIndex169 := position, tokenIndex
								if !_rules[rulenegative]() {
									goto l170
								}
								goto l169
							l170:
								position, tokenIndex = position169, tokenIndex169
								{
									position171 := position
									if buffer[position] != rune('+') {
										goto l167
									}
									position++
									add(rulepositive, position171)
								}
							}
						l169:
							goto l168
						l167:
							position, tokenIndex = position167, tokenIndex167
						}
					l168:
					l172:
						{
							position173, tokenIndex173 := position, tokenIndex
							if !_rules[rulenumber]() {
								goto l173
							}
							goto l172
						l173:
							position, tokenIndex = position173, tokenIndex173
						}
						goto l164
					l163:
						position, tokenIndex = position163, tokenIndex163
					}
				l164:
					goto l161
				l160:
					position, tokenIndex = position160, tokenIndex160
				}
			l161:
				add(rulevalue, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		/* 15 ws <- <' '> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if buffer[position] != rune(' ') {
					goto l174
				}
				position++
				add(rulews, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 16 comma <- <','> */
		func() bool {
			position176, tokenIndex176 := position, tokenIndex
			{
				position177 := position
				if buffer[position] != rune(',') {
					goto l176
				}
				position++
				add(rulecomma, position177)
			}
			return true
		l176:
			position, tokenIndex = position176, tokenIndex176
			return false
		},
		/* 17 lf <- <'\n'> */
		func() bool {
			position178, tokenIndex178 := position, tokenIndex
			{
				position179 := position
				if buffer[position] != rune('\n') {
					goto l178
				}
				position++
				add(rulelf, position179)
			}
			return true
		l178:
			position, tokenIndex = position178, tokenIndex178
			return false
		},
		/* 18 cr <- <'\r'> */
		func() bool {
			position180, tokenIndex180 := position, tokenIndex
			{
				position181 := position
				if buffer[position] != rune('\r') {
					goto l180
				}
				position++
				add(rulecr, position181)
			}
			return true
		l180:
			position, tokenIndex = position180, tokenIndex180
			return false
		},
		/* 19 escdquote <- <'"'> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				if buffer[position] != rune('"') {
					goto l182
				}
				position++
				add(ruleescdquote, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 20 escsquote <- <('\\' '\'')> */
		nil,
		/* 21 squote <- <'\''> */
		func() bool {
			position185, tokenIndex185 := position, tokenIndex
			{
				position186 := position
				if buffer[position] != rune('\'') {
					goto l185
				}
				position++
				add(rulesquote, position186)
			}
			return true
		l185:
			position, tokenIndex = position185, tokenIndex185
			return false
		},
		/* 22 obracket <- <'['> */
		func() bool {
			position187, tokenIndex187 := position, tokenIndex
			{
				position188 := position
				if buffer[position] != rune('[') {
					goto l187
				}
				position++
				add(ruleobracket, position188)
			}
			return true
		l187:
			position, tokenIndex = position187, tokenIndex187
			return false
		},
		/* 23 cbracket <- <']'> */
		func() bool {
			position189, tokenIndex189 := position, tokenIndex
			{
				position190 := position
				if buffer[position] != rune(']') {
					goto l189
				}
				position++
				add(rulecbracket, position190)
			}
			return true
		l189:
			position, tokenIndex = position189, tokenIndex189
			return false
		},
		/* 24 oparen <- <'('> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				if buffer[position] != rune('(') {
					goto l191
				}
				position++
				add(ruleoparen, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 25 cparen <- <')'> */
		func() bool {
			position193, tokenIndex193 := position, tokenIndex
			{
				position194 := position
				if buffer[position] != rune(')') {
					goto l193
				}
				position++
				add(rulecparen, position194)
			}
			return true
		l193:
			position, tokenIndex = position193, tokenIndex193
			return false
		},
		/* 26 number <- <([a-z] / [A-Z] / [0-9])> */
		func() bool {
			position195, tokenIndex195 := position, tokenIndex
			{
				position196 := position
				{
					position197, tokenIndex197 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l198
					}
					position++
					goto l197
				l198:
					position, tokenIndex = position197, tokenIndex197
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l199
					}
					position++
					goto l197
				l199:
					position, tokenIndex = position197, tokenIndex197
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l195
					}
					position++
				}
			l197:
				add(rulenumber, position196)
			}
			return true
		l195:
			position, tokenIndex = position195, tokenIndex195
			return false
		},
		/* 27 negative <- <'-'> */
		func() bool {
			position200, tokenIndex200 := position, tokenIndex
			{
				position201 := position
				if buffer[position] != rune('-') {
					goto l200
				}
				position++
				add(rulenegative, position201)
			}
			return true
		l200:
			position, tokenIndex = position200, tokenIndex200
			return false
		},
		/* 28 positive <- <'+'> */
		nil,
		/* 29 decimal_point <- <'.'> */
		nil,
		/* 30 textdata <- <([a-z] / [A-Z] / [0-9] / ' ' / '!' / '#' / '$' / '&' / '%' / '*' / '+' / '-' / '.' / '/' / ':' / ';' / [<->] / '?' / '\\' / '^' / '_' / '`' / '{' / '|' / '}' / '~')> */
		func() bool {
			position204, tokenIndex204 := position, tokenIndex
			{
				position205 := position
				{
					position206, tokenIndex206 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l207
					}
					position++
					goto l206
				l207:
					position, tokenIndex = position206, tokenIndex206
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l208
					}
					position++
					goto l206
				l208:
					position, tokenIndex = position206, tokenIndex206
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l209
					}
					position++
					goto l206
				l209:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune(' ') {
						goto l210
					}
					position++
					goto l206
				l210:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('!') {
						goto l211
					}
					position++
					goto l206
				l211:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('#') {
						goto l212
					}
					position++
					goto l206
				l212:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('$') {
						goto l213
					}
					position++
					goto l206
				l213:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('&') {
						goto l214
					}
					position++
					goto l206
				l214:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('%') {
						goto l215
					}
					position++
					goto l206
				l215:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('*') {
						goto l216
					}
					position++
					goto l206
				l216:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('+') {
						goto l217
					}
					position++
					goto l206
				l217:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('-') {
						goto l218
					}
					position++
					goto l206
				l218:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('.') {
						goto l219
					}
					position++
					goto l206
				l219:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('/') {
						goto l220
					}
					position++
					goto l206
				l220:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune(':') {
						goto l221
					}
					position++
					goto l206
				l221:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune(';') {
						goto l222
					}
					position++
					goto l206
				l222:
					position, tokenIndex = position206, tokenIndex206
					if c := buffer[position]; c < rune('<') || c > rune('>') {
						goto l223
					}
					position++
					goto l206
				l223:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('?') {
						goto l224
					}
					position++
					goto l206
				l224:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('\\') {
						goto l225
					}
					position++
					goto l206
				l225:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('^') {
						goto l226
					}
					position++
					goto l206
				l226:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('_') {
						goto l227
					}
					position++
					goto l206
				l227:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('`') {
						goto l228
					}
					position++
					goto l206
				l228:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('{') {
						goto l229
					}
					position++
					goto l206
				l229:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('|') {
						goto l230
					}
					position++
					goto l206
				l230:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('}') {
						goto l231
					}
					position++
					goto l206
				l231:
					position, tokenIndex = position206, tokenIndex206
					if buffer[position] != rune('~') {
						goto l204
					}
					position++
				}
			l206:
				add(ruletextdata, position205)
			}
			return true
		l204:
			position, tokenIndex = position204, tokenIndex204
			return false
		},
		/* 32 Action0 <- <{ p.pushArray() }> */
		nil,
		/* 33 Action1 <- <{ p.popArray() }> */
		nil,
		/* 34 Action2 <- <{ p.pushArray() }> */
		nil,
		/* 35 Action3 <- <{ p.popArray() }> */
		nil,
		nil,
		/* 37 Action4 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
		/* 38 Action5 <- <{ p.pushArray() }> */
		nil,
		/* 39 Action6 <- <{ p.popArray() }> */
		nil,
		/* 40 Action7 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
		/* 41 Action8 <- <{ p.pushArray() }> */
		nil,
		/* 42 Action9 <- <{ p.popArray() }> */
		nil,
		/* 43 Action10 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
		/* 44 Action11 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
		/* 45 Action12 <- <{ p.addElement(buffer[begin:end]) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
